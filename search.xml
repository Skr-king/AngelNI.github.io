<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[深度优先搜索(DFS))]]></title>
    <url>%2FAngelNI.github.io%2F%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-DFS.html</url>
    <content type="text"><![CDATA[深度优先搜索(DFS)DFS深度优先搜索算法（Depth-First-Search），是搜索算法的一种。是沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点v的所有边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止（属于盲目搜索）。 “一路走到头，不撞墙不回头” ​ 深度优先搜索属于图算法的一种，是一个针对图和树的遍历算法，英文缩写为DFS即Depth First Search。深度优先搜索是图论中的经典算法，利用深度优先搜索算法可以产生目标图的相应拓扑排序表，利用拓扑排序表可以方便的解决很多相关的图论问题，如最大路径问题等等。一般用堆数据结构来辅助实现DFS算法。其过程简要来说是对每一个可能的分支路径深入到不能再深入为止，而且每个节点只能访问一次。 树状图图解例如，想要从1到9，每到一个岔路口你有两种选择，你可以选择左枝，或者右枝，共两种可能，但是当你走到死胡同时，你只能原路返回，走到这个死胡同的上一个路口，走另一条路，依次类推，直到走到终点，也就是九。你可能会问，这不明摆着呢吗，直接从1经过8到9不就行了。没错，这是最直接的办法，但计算机傻啊，没有你聪明啊，它只会，一次一次的尝试，直到最终结果。 下面是图解 例题给定整数a1、a2、…….an，判断是否可以从中选出若干数，使它们的和恰好为K。 输入 首先，n和k，n表示数的个数，k表示数的和。接着一行n个数。（1&lt;=n&lt;=20,保证不超int范围） 输出 如果和恰好可以为k，输出“YES”，否则“NO” 样例输入 1234 131 2 4 7 样例输出 1YES 思路每一个数有加与不加两种可能，从树的一枝不加到尾，然后，再从叶末返回上一层叶节点，走另一个分支，也就是加上最后一个，与所求的和比较，不符再重复上述操作。直到找到与所求和相等返回Yes 实现1234567891011121314151617181920212223242526#include&lt;iostream&gt;#include&lt;stdio.h&gt;using namespace std;int n,k,a[50];int dfs(int i,int sum)&#123; if(i==n) return sum==k; if(dfs(i+1,sum)) return 1; if(dfs(i+1,sum+=a[i])) return 1; return 0; &#125;int main()&#123; cin&gt;&gt;n&gt;&gt;k; for(int i=0;i&lt;n;i++) cin&gt;&gt;a[i]; if(dfs(0,0)) cout&lt;&lt;&quot;YES&quot;&lt;&lt;endl; else cout&lt;&lt;&quot;No!&quot;&lt;&lt;endl; return 0; &#125;]]></content>
      <categories>
        <category>算法，C++/C</category>
      </categories>
      <tags>
        <tag>算法，C++/C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[天生棋局]]></title>
    <url>%2FAngelNI.github.io%2F%E5%A4%A9%E7%94%9F%E6%A3%8B%E5%B1%80.html</url>
    <content type="text"><![CDATA[题目：天生棋局天生棋局问题，是C语言老师留的一个课外练习题。要求有用指针来写，因为指针学的不扎实，也因为第一次看到这道题时，第一个想法就是要用数组来写，所以以下是用数组对天生棋局代码。(指针的会后续补上) 题目描述中国传统文化源远流长，博大精深，包含着华夏先哲的无穷智慧，也是历朝历代炎黄子孙生活的缩影。围棋作为中华民族流传已久的一种策略性棋牌游戏，蕴含着丰富的汉民族文化内涵，是中国文明与中华文化的体现。本案例要求创建一个棋盘，在棋盘生成的同时初始化棋盘，根据初始化后棋盘中棋子的位置来判断此时的棋局是否是一局好棋。具体要求如下：** 1）棋盘的大小根据用户的指令确定； 2）棋盘中棋子的数量也由用户设定； 3）棋子的位置由随机数函数随机确定，若生成的棋盘中有两颗棋子落在同一行或同一列，则判定为“好棋”，否则判定为“不是好棋”。 题前注释1.随机数头文件： #include&lt;stdlib.h&gt; And #include&lt;time.h&gt; 函数： 1.rand()函数生成伪随机数。 2.随机发生器的初始化函数`srand(unsigned seed) 目的： ​ rand（）函数是按指定的顺序来产生整数，但可能两次的随机数相同并不是真正的随机，叫做伪随机数。而随机发生器的初始化函数`srand(unsigned seed)（也位于stdlib.h）进行伪随机数列初始化，通过用时间函数time（NULL）作为seed，使每一次产生的随机数都不一样。 2.棋盘，棋子这是一个下棋的游戏，如果把随机的产生的棋子赤果果地展现在棋盘上，效果会很明显，并且题目说要生成棋盘，所以首先要打印一个棋盘 打印棋盘，首先要有边框和棋子，这些是从word上copy来的,然后用双层循环就可以了。 3.判断好/坏棋根据题意即可 疑惑根据题意，他说若生成的棋盘中有两颗棋子落在同一行或同一列，则判定为“好棋”，否则判定为“不是好棋”。但与查的资料不同，说是两颗棋子相邻是好棋。 代码实现12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;time.h&gt; int main()&#123; srand((unsigned int)time(NULL)); // 生成伪随机数，每次的随机数都不一样 int n,m; unsigned long kb[700][700]; //默认最大棋盘大小 printf(&quot;请输入棋盘大小： &quot;); scanf(&quot;%d&quot;,&amp;n); printf(&quot;请输入棋子数量： &quot;); scanf(&quot;%d&quot;,&amp;m); while(m--) //生成 0 ~ n-1 的随机数 并赋值为 1 &#123; int a=rand()%n,b=rand()%n; kb[a][b]=1; &#125; for(int i=0;i&lt;n;i++) // 生 成 棋 盘 &#123; for(int j =0;j&lt;n;j++) // ┏┓┗┛┠┷┨┯┼● &#123; if(kb[i][j]==1) printf(&quot;●&quot;); else &#123; if (i == 0 &amp;&amp; j == 0) printf(&quot;┏ &quot;); else if (i == 0 &amp;&amp; j == n - 1) printf(&quot;┓ &quot;); else if (i == n - 1 &amp;&amp; j == 0) printf(&quot;┗ &quot;); else if (i == n - 1 &amp;&amp; j == n - 1) printf(&quot;┛ &quot;); else if (j == 0) printf(&quot;┠ &quot;); else if (i == n - 1) printf(&quot;┷ &quot;); else if (j == n - 1) printf(&quot;┨ &quot;); else if (i == 0) printf(&quot;┯ &quot;); else printf(&quot;┼ &quot;); &#125; &#125; putchar(&apos;\n&apos;); &#125; int flag = 0; // 默认不是好棋。 for(int i=0;i&lt;n;i++) // 判断 好棋 坏棋 &#123; for(int j=0;j&lt;n;j++) &#123; if (kb[i][j] == 1) &#123; if (j&gt;0 &amp;&amp; kb[i][j-1] == 1) //判断同一行有无相邻棋子 &#123; printf(&quot;好棋！\n&quot;); flag = 1; break; &#125; if (i &gt;0 &amp;&amp; kb[i-1][j] == 1) //判断同一列有无相邻棋子 &#123; printf(&quot;好棋！\n&quot;); flag = 1; break; &#125; &#125; &#125; &#125; if(flag == 0) printf(&quot;不是好棋&quot;); return 0; &#125;]]></content>
      <categories>
        <category>C++/C</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>C++/C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++初学]]></title>
    <url>%2FAngelNI.github.io%2FC%2B%2B%E5%88%9D%E5%AD%A6.html</url>
    <content type="text"><![CDATA[C++ 初学（一）在一次解决排序问题时，初步接触C++中的sort（）函数，在问题解决上非常好用，不用自己再写排序的代码，就像python中 import 函数库一样，因为懒嘛，所以更懒，嘿嘿！！所以想接触一下C++，简单学习一下子。 C++C++是C语言的继承，它既可以进行C语言的过程化程序设计，又可以进行以抽象数据类型为特点的基于对象的程序设计，还可以进行以继承和多态为特点的面向对象的程序设计。C++擅长面向对象程序设计的同时，还可以进行基于过程的程序设计，因而C++就适应的问题规模而论，大小由之。 C++ 是一种静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言，支持过程化编程、面向对象编程和泛型编程。 C++ 被认为是一种中级语言，它综合了高级语言和低级语言的特点。 C++ 是由 Bjarne Stroustrup 于 1979 年在新泽西州美利山贝尔实验室开始设计开发的。C++ 进一步扩充和完善了 C 语言，最初命名为带类的C，后来在 1983 年更名为 C++。 C++ 是 C 的一个超集，事实上，任何合法的 C 程序都是合法的 C++ 程序。 好了废话不多说，开始！ Hello world12345678910#include &lt;iostream&gt;using namespace std;// // main() 是程序开始执行的地方 int main()&#123; cout &lt;&lt; &quot;Hello World&quot;; // 输出 Hello World return 0;&#125; 接下来我们讲解一下上面这段程序： C++ 语言定义了一些头文件，这些头文件包含了程序中必需的或有用的信息。上面这段程序中，包含了头文件 。 下一行 using namespace std; 告诉编译器使用 std 命名空间。命名空间是 C++ 中一个相对新的概念。 下一行 // main() 是程序开始执行的地方 是一个单行注释。单行注释以 // 开头，在行末结束。 下一行 int main() 是主函数，程序从这里开始执行。 下一行 cout &lt;&lt; “Hello World”; 会在屏幕上显示消息 “Hello World”。 下一行 return 0; 终止 main( )函数，并向调用进程返回值 0。 输入、输出C++的输出和输入是用“流”(stream)的方式实现的｡有关流对象cin､cout和流运算符的定义等信息是存放在C++的输入输出流库中的,因此如果在程序中使用cin､cout和流运算符,就必须使用预处理命令把头文件stream包含到本文件中: #include &lt;iostream&gt;尽管cin和cout不是C++本身提供的语句,但是在不致混淆的情况下,为了叙述方便,常常把由cin和流提取运算符“&gt;&gt;”实现输入的语句称为输入语句或cin语句,把由cout和流插入运算符“&lt;&lt;”实现输出的语句称为输出语句或cout语句｡根据C++的语法,凡是能实现某种操作而且最后以分号结束的都是语句｡ 1234567891011121314151617181920212223#include&lt;cstdio&gt;#include&lt;iostream&gt;#include &lt;iomanip&gt; //格式化输出的头文件，注意这里不要加.husing namespace std;int main()&#123; int a,b,c; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c; cout&lt;&lt;a&lt;&lt;setw(2)&lt;&lt;b&lt;&lt;setw(2)&lt;&lt;c&lt;&lt;endl; float num1 = 123.456f,num2 = 563.1f,num3 = 1.30f; float num4 = 123456.4444f; cout &lt;&lt; setprecision(4); cout &lt;&lt; &quot;第一个数：&quot; &lt;&lt; num1 &lt;&lt; endl; cout &lt;&lt; &quot;第二个数：&quot; &lt;&lt; num2 &lt;&lt; endl; cout &lt;&lt; &quot;第三个数：&quot; &lt;&lt; num3 &lt;&lt; endl; cout &lt;&lt; &quot;第四个数：&quot; &lt;&lt; num4 &lt;&lt; endl;//endl 英语意思是end of line,即一行输出结束，然后输出下一行。 return 0; &#125; 头文件#include&lt;iomanip&gt;是格式化输出的头文件，注意后面不加 .h， 使用setw()来控制占位宽度。注意事项 setw() 虽然带有括号，但是其实是一个操作符，并不是函数。 setw() 主要引用头文件 iomanip 才能使用。 如果setw() 所约束的输出超过了限制，不会被截断。是多少位就输出多少位。 如果输出是浮点数，小数点也会占一个位。 如果输出是字符串，空格有段有效字符，占一个位。从上面的输出结果也可以看出来。 setw() 只能约束住跟自己相邻的一个输出。也就是说 使用setprecision()控制浮点数有效位注意事项： setprecision() 同样是一个操作符，需要包含头文件 iomanip。 如果输出浮点数不足位，不会在其后面补0。 如果末尾有0，默认是不输出的。后面我们有其他方法可以输出末尾的0。 setprecision() 不同于setw()，setprecision() 设置之后，在下次设置之前都是有效的。从程序结果中可以看出来。 如果要输出的位数过多，则用科学计数法表示，10为基数。 setfioflags() 控制定点输出12345678910111213141516#include &lt;iostream&gt;#include &lt;iomanip&gt; using namespace std; int main()&#123; float num1 = 13.000f,num2 = 14.568f,num3 = 1.2f; cout &lt;&lt; setiosflags(ios::fixed|ios::showpoint); cout &lt;&lt; setprecision(4); cout &lt;&lt; &quot;第一个数：&quot; &lt;&lt; num1 &lt;&lt; endl; cout &lt;&lt; &quot;第三个数：&quot; &lt;&lt; num2 &lt;&lt; endl; cout &lt;&lt; &quot;第二个数：&quot; &lt;&lt; num3 &lt;&lt; endl; return 0; &#125; setiosflags() 是通过状态标志来实现对输出的控制的。状态标志功能如下表 状态标志 功能 ios::left 左对齐，右边填空格 ios::dec 所有整数以十进制输出 ios::right 右对齐，左边填空格 ios::scientific 以科学计数法形式输出浮点数 ios::hex 所有整数以十六进制输出 ios::fixed 以定点形式输出浮点数 ios::oct 所有整数以八进制输出 ios::showpoint 显示小数点和尾部的零 ios::showpos 在正数前面输出+ ios::uppercase 对于十六进制输出，使用大写字母表示 setiosflags() 需要与 setprecision() 一起使用。如果状态标志设为 ios::fixed，那么setprecision()设置的数字，就表示小数位的个数，不足补零。]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微小说欣赏]]></title>
    <url>%2FAngelNI.github.io%2F%E5%BE%AE%E5%B0%8F%E8%AF%B4%E6%AC%A3%E8%B5%8F.html</url>
    <content type="text"><![CDATA[微小说欣赏1.我因车祸而失明，所以我从不知女友长什么样。那年，她得了胃癌，临终前她将眼角膜移植给了我。我恢复光明后的第一件事就是找她的照片，然而我只找到她留给我的一封信，信里有一张空白照片，照片上写有一句话：“别再想我长什么样，下一个你爱上的人，就是我的模样。” 2.外婆离开人世的那个黄昏，外公在病房里陪伴着她走完了她生命的最后一段旅程。外婆临去前对外公说‘放学了’。一直假装平静的外公听完这句话后像个孩子似的大哭起来。葬礼结束后我问起外公这三个字的含义，外公告诉我说这是从前他和外婆还在上小学时外婆常说的一句话：放学了，我们一起回家吧。 3.她车祸去世后，他思念万分，利用时光机回到过去，阻止惨剧发生。机器出了差错，比预定时间早了几分钟。他拿出钥匙开门，听见卧室传出她的娇喘和男人的声音。她手机响了，他记得这是他打来的。“我得走了，我男人催我呢。”。他听着，惹羞成怒，出门偷了一辆车，看着急匆匆的她，一脚踩下油门。 4.妈妈你看！”小女孩开心地递过来一张写满字的纸。“我听见一个哥哥问姐姐怎么才会爱他，姐姐说只要每天在纸上写1000遍她的名字…”“傻孩子！”女人抱住小女孩：那宝贝是怎么知道爸爸名字的？“这里！”小女孩打开抽屉：上次爸爸把名字签在上面了！女人顺眼望去，里面躺着一张离婚协议书 5.他看着桌子上忙碌的蚂蚁，伸出手指，一下捏死一只。蚂蚁们大惊，四下乱窜。稍停，又排成一字继续工作。他又伸出手，再捏死一只。蚂蚁大乱，稍顷还是排一字。等到第10次时，蚂蚁们已经熟视无睹。当他向第11只下手时，轰隆一声，巨大的天花板砸了下来。他最后一眼，只看到推倒他房子的那只怪手。 6.他和她青梅竹马，相约为百姓杀贪官，仗剑天涯。一次刺杀失败被俘，他竟被招安，无数同仁被杀。她含泪发誓要刃叛徒，遂色诱贪官纳她为妾。十年后，他成平反大将。酒宴上，她起身献舞，刺中他手臂。他深情说，你之后，我再无爱过。她心软刃落，他抽刀刺死她，心想，真好骗。 7.他大她快二十岁，他对她很好，百般呵护，他们认识不到一年，他就执意要娶她。朋友都很羡慕她，她却犹豫不决，因为小时候一场手术意外造成她不孕，他是独子，庞大的家族事业等他继承，她不想耽误他。终於她鼓起勇气向他坦诚不孕的事实，他说我知道，当年那刀是我开的，这些年来我一直在找你！ 8.5岁“妈妈，烧红烧肉吧”“行，烧”15岁“妈妈，别烧红烧肉了，换换味道” “行，买别的菜” 35岁“儿子，啥时候回家吃一顿啊？妈给做红烧肉” “不行，最近忙” 50岁“妈妈今天路过你家，给你带红烧肉” “不行，今不在家” 70岁“妈，我想吃红烧肉” 那边，已经没有了妈妈的声音 9.就要做心脏移植手术了，他深情地望着躺在床上的妻子，拿签字表的手有点抖。“快签吧，你个窝囊废、穷鬼！”妻骂。手术很成功，她没有一点排异反应。“我那没心肝的丈夫哪？”她问护士。护士递过一张纸，上面画一颗鲜红的心和一行小字：“这是我最后能给你的了，我爱你。” 10.他与爸爸相依至大。他常问：为什么不给他找个后妈？爸爸总是笑说：此生只爱妈妈一个！后来他长大成家，爸爸说要结婚，他愤怒地打了那女人一耳光，骂爸爸是个骗子。从此，爸爸再未提及此事。多年后爸爸去世，他整理遗物时发现了一张自己婴儿时的照片，背面是沧桑的字迹：战友之子，当如吾儿！]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
        <tag>文学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML学习]]></title>
    <url>%2FAngelNI.github.io%2FHTML%E5%AD%A6%E4%B9%A0.html</url>
    <content type="text"></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二分法查找]]></title>
    <url>%2FAngelNI.github.io%2F%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE-1.html</url>
    <content type="text"><![CDATA[二分法查找二分法查找，二分搜所，也称折半搜索，每次查找区间减半，适用于数据量较大，对一个有序的数组中查找某一元素。 例如：给一有序的数组a[9]={1,2,3,4,5,6,7,8,9,}，想要确定 3 的位置。 实现：123(a[0]+a[8])/2=5 大于 3 则只需要查找a[0]~a[4]就可以(a[0]+a[4])/2=3 此时刚好等于3，则此时3的位置就是（0+4）/2=2则可知 a[2]=3 至此查找结束 下面通过一个例子来具体体验下二分法的妙处 Trailing Zeroesn的阶乘尾部有q个连续的0，现在给你q，请你算出满足条件的n，如果有多个n满足条件，输出最小的那个即可。 Input123输入一个T(T &lt;= 10000),表示样例数量。每个样例输入一个q。(1 &lt;= q &lt;= 100,000,000) output对于每个样例，输出满足条件的最小的n，如果没有满足条件的则输出”impossible”。. Sample Input12345673125 Sample Output12345Case 1: 5Case 2: 10Case 3: impossible 思路这是一个判断阶乘后面有多少个零，输出满足条件下的最小解。 首先判断0的个数，我们可以通过判断5的个数来判断0`的个数（10可以分成2*5） 例如：5！=1*2*3*4*5=120 代码实现12345678910long long fn(long long n) //求n阶乘的末尾0个数 &#123; long long a = 0; while(n) &#123; a += n/5; n = n/5; &#125; return a;&#125; 例如：判断25！末尾有几个0 a=25/5 –&gt; a=5 a+=5/5 –&gt; a=6 由此可以判断25的阶乘末尾有6个零（拿计算器验证） 整个题解（这是大佬写的，我偷偷拿来哈~） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950##### #include&lt;iostream&gt; //cin，cout数据流输入输出的头文件#include&lt;cstdio&gt;using namespace std;typedef long long ll; //声明定义long long 的别名 llconst ll maxn = 1e17; //题目中0的个数 1~1e9ll fn(ll n)//求n阶乘的末尾0个数 &#123; ll a = 0; while(n) &#123; a += n/5; n = n/5; &#125; return a;&#125;int main()&#123; int n, q; ll ans;//定义所要求的答案 int Case = 0; cin&gt;&gt;n; //输入测试组数 while(n--) &#123; Case++;//判断测试第几个 cin&gt;&gt;q;//输入0的个数 int l, r;//定义左值，和右值 l =1; r = maxn; ans = 0; while(r&gt;=l) &#123; ll mid = (l+r)&gt;&gt;1; //直接平均可能溢出，所以用这个 注： &gt;&gt; 值的二进制形式右移一位，相当于十进制除2 if(fn(mid)==q) &#123; ans = mid;//如果中间的那个数零的个数恰好等于q，则为答案 r = mid-1; &#125; else if(fn(mid)&lt;q) l = mid+1;//如果中间的值0的个数小于q，则左值++ else r = mid-1;// 否则 右值—— &#125; if(ans) printf(&quot;Case %d: %lld&quot;, Case, ans);//如果结果不为零，按输出格式打印 else printf(&quot;Case %d: impossible&quot;, Case);//否则，则输出impossile cout&lt;&lt;endl; &#125; return 0;&#125; 放松一下~~~]]></content>
      <categories>
        <category>算法,C/C++</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法]]></title>
    <url>%2FAngelNI.github.io%2FMarkdown%E8%AF%AD%E6%B3%95.html</url>
    <content type="text"><![CDATA[Markdown 语法最近经过几天的奋斗，自己的博客基本框架终于搭建成功，接下来就是开始写文章了，不过上来就碰上个头疼的问题，就是怎么写的问题，我就想度娘请教（度娘，真帅），说是用Markdown语法写，最近在Notebook上写Python的学习笔记，老师说过要自学Markdown语法，说是非常简单（没错，就是很简单），下面就是Markdown的语法介绍啦，要好好学哟。 在编写 Markdown 时，强烈的推荐给大家一款简洁易用的 Markdown 编辑器 —— Typora 按照官方的说法就是 简单而强大，它不仅支持原生的语法，也支持对应的快捷键，更重要的是它还可以 实时预览 这里附上 Typora 的下载地址：点击这里 , 有兴趣的朋友可以下载来试试 好，下面开始进入正题，介绍一些常用的 Markdown 语法 (1) 标题Markdown语法：1234567891011#一级标题``##二级标题``###三级标题``####四级标题``#####五级标题``######六级标题 Typora快捷键：1234567891011Ctrl + 1：一级标题Ctrl + 2：二级标题Ctrl + 3：三级标题Ctrl + 4：四级标题Ctrl + 5：五级标题Ctrl + 6：六级标题 (2)粗体、斜体、删除线Markdown语法：1234567*斜体*``**粗体**``***加粗斜线***``~~删除线~~ Typora快捷键：1234567Ctrl+l ：斜体Ctrl+B：粗体Ctrl+U：下划线Alt + Shift + 5 ：删除线 (3) 引用块Markdown语法：&gt; 文字引用 Typora快捷键：1Ctrl + Shift + Q (4)代码块Markdown语法：&#39; 行内代码&#39; &#39;&#39;&#39; 多行代码&#39;&#39;&#39; Typora快捷键：123行内代码： Ctrl + Shift + `多行代码：Ctrl + Shift +K (5)公式块Markdown语法：1$$数学公式$$ Typora快捷键：1Ctrl + Shift + M (6)分割线Markdown 语法：12345方法1：---``方法2：+++``方法3：*** (7)列表Markdown语法：1.有序列表项 2. * 无序列表项 3. + 无序列表项 4. - 无序列表项 Typora快捷键：有序列表项：Ctrl+Shift+[ 有序列表项：Ctrl+Shift+] (8) 表格Markdown语法：1. 表头1|表头2 -|-|- 内容11|内容12 内容21|内容22 Typora 快捷键：Ctrl+T (9)超链接Markdown语法：方法一：[链接文字](链接地址 &quot;链接描述&quot;) 例如：[示例链接](https://www.example.com/ &quot;示例链接&quot;) 方法二：&lt;链接地址&gt; 例如：&lt;https://www.example.com/&gt; Typora快捷键：Ctrl+K (10)图片Markdown语法：![图片文字](图片地址 &quot;图片描述&quot;) 例如：![示例图片](https://www.example.com/example.PNG &quot;示例图片&quot;) Typora快捷键：Ctrl+Shift+I]]></content>
      <categories>
        <category>Markdown语法</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+github]]></title>
    <url>%2FAngelNI.github.io%2Fhexo-github.html</url>
    <content type="text"><![CDATA[博客搭建(自己总结)之前自己搭建博客，可以说废了很大的劲，这里总结了一下各位大佬们搭建博客的方法，供大家借鉴。 1.安装所需软件1.git安装Windows系统下安装git 可以直接到官网下载安装点击这里 由于访问的是外网，下载速度可能会慢（也可能非常慢） 下面提供百度云的下载地址 64-bit Git for Windows Setup : https://npm.taobao.org/mirrors/git-for-windows/v2.21.0.windows.1/Git-2.21.0-64-bit.exe 2.Node.js安装可以直接到官网下载安装点击这里 百度网盘资源： https://pan.baidu.com/s/1hKVcYfPorRX89hl7D4R1eA 提取码：wsti 下载完成后，安装时一定要点击 Add to PATH 安装完成后，打开cmd，输入 node -v 测试安装是否成功 下面来解决npm卡顿问题 1.打开cmd，换成阿里源 11.npm config set registry https://registry.npm.taobao.org 2.验证命令 12.npm config get registry //返回https://registry.npm.taobao.org，说明镜像配置成功 3.安装cnpm 13.npm install -g cnpm --registry=https://registry.npm.taobao.org 3.hexo安装打开git目录下的git-bash.exe，输入下面代码 npm install -g hexo-cli 安装hexo完成后执行下列命令 123hexo init &lt;文件夹名&gt; cd &lt;文件夹名&gt;npm install hexo 理论上安装在git文件夹下 4.在github上注册账号并同时建立仓库gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。（来源百度百科） github官网点击这里 这个是github基础设置和使用详解点击这里 5.ssh授权获取私钥先配置SSH,在git-bash下输入 12git config --global user.name &quot;github注册名&quot;git config --global user.email &quot;github注册邮箱&quot; 打开git bash，输入ssh-kengen -t rsa，停顿时，敲击回车 最后会在C盘目录下生成id_ras和id_rsa.pub两个文件夹，用记事本打开id_rsa.pub，复制打开的文件内容到 github-&gt;setting-&gt;SSH and GPG key 下 添加后，在git-bash进行测试，输入 ssh -T git@github.com 如果返回Hi username ！You’ve successfully ……，说明配置成功 6.配置_config.yml打开你的hexo目录下的_config.yml文档（我用的是notepad++打开的） 修改最下面的deploy下的内容 12345type: gitrepository : //这里是你的仓库下，点击Clone ordownload（绿色的）点击Use SSH复制框框内的内容到这里。bransh：//这里是你的bransh名称，默认为master 下面来修改 url和 root 123url ：// 是你的github 分配的地址root：// 是你的仓库的名字 一定要注意每一项冒号后有一个英文空格 7.本地测试打开git bash进入博客的根目录（cd + 文件夹名） 输入 12345hexo cleanhexo ghexo s hexo s是开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容。 显示的主题是 hexo 默认的 hexo 操作指令点击这里 8.上传到github仓库首先先安装hexo拓展库，打开git bash输入 12npm install hexo-deployer-git --savenpm install 然后输入 1234hexo clean//清除缓存hexo g//生成静态文件hexo d/上传打开github分配的网站，就可以看到你的blog了 后记自己搭建博客可能不是一帆风顺的，可能遇到各种不同的错误，一定要耐得住性子，一步一步来搭建。 记得，一定要善用搜索，遇到不懂得问题去百度上搜索。 最后，度娘，可真帅哪！！！]]></content>
      <categories>
        <category>hexo+github</category>
      </categories>
      <tags>
        <tag>hexo+github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello world]]></title>
    <url>%2FAngelNI.github.io%2FHelloworld.html</url>
    <content type="text"><![CDATA[Hello world记一次过程经历​ 最近，自己在搭一个博客，用 hexo+github，一开始按照网上的教程下载相应的软件，cmd安装，git bash 安装hexo，最开始可是在自己的本地可以预览，效果不错，直接就上传到github上的我的repo，结果cmd出错，由于对hexo 文件的位置不清，和出现的错误，我直接就删除了hexo，但是不是直接的卸载，有些文件还在（找不到啊 呜呜~），我用重新npm安装，发现还是不行，当时头大到想要格式化电脑了（还好没有，要不然就要重新慢慢下载了），然后我去找baidu，简书，发现自己的许多错误操作。好吧，我又从新开始。还是有error，我就按个所错误，发现自己有许多的本地配置没有设置，我就一条一条的修改（可气人了，一步踩一个坑，一步填一个坑），花了两天才把本地配置好（上课没时间啊）。 ​ 又因为，默认的主题很low（只是个人而言），不怎么喜欢，想换个主题，hexo上面有好多的主题，一个一个翻看，也没有喜欢的，现在比较流行的是NEXT主题（没错我找了度娘），就在网上下载NEXT主题包，一开始的主题内容，没设计的，所以我又找了度娘，还在CSDN上搜搜，发现许多大佬掉了许多的坑，也有填坑的方法(坑和经验，傻傻分不清），就开始一步一步自己搭，终于，经过一天多的自己的骚操作，在清明节的下午本地可以看到比较好的主题设置（还有点不满意，后续会修改）。 感受​ （真是不作死不会死，谁TM知道我为什么突然想到建博客呢！） ​ 经过三天多自己的摸索，我这个小小白终于把自己的blog建成了（~~热烈欢迎大家访问）。在建博客的过程中，真是有点头大了，因为自己对命令行操作一点不了解，完全是两眼一模黑，在黑暗中摸索（哈哈，有点夸张），出现错误也不知道哪里的问题，真的很感谢度娘的帮助（说白了，多谢大佬们的坑啊）。 ​ 这篇文章的标题是printf(“Hello,world”),学C语言的都知道这是入门的基础程序，我想用这个标题想说，当你去接触一个陌生不懂的东西时，不是一帆风顺的，总会有大波小浪，不过，经过自己的一步一步的摸索总会找到自己的___（你懂的哈），不管如何都不要放弃，既然已经迈开了重要的第一步，就要坚持走到终点。 ​ 对了，还有还有，“生命在于运动，电脑在于折腾啊”，不管会不会，先折腾折腾吧（坏了我可不管~~) ​ . ​ . ​ . ​ . ​ . ​ . ​ . ​ . ​ 度娘，真帅！！！]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2FAngelNI.github.io%2Fhello-world.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
</search>
