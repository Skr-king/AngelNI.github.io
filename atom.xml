<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Angel_Sky</title>
  
  <subtitle>妈妈说人最好不要错过两样东西， 最后一班回家的车和一个深爱你的人.</subtitle>
  <link href="/AngelNI.github.io/atom.xml" rel="self"/>
  
  <link href="https://angelni.github.io/"/>
  <updated>2019-05-02T09:50:13.395Z</updated>
  <id>https://angelni.github.io/</id>
  
  <author>
    <name>Sky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A New Start</title>
    <link href="https://angelni.github.io/A-New-Start.html"/>
    <id>https://angelni.github.io/A-New-Start.html</id>
    <published>2019-05-02T06:32:09.000Z</published>
    <updated>2019-05-02T09:50:13.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-New-Start"><a href="#A-New-Start" class="headerlink" title="A New Start"></a>A New Start</h1><p>This is a nice day!!!</p><p>After half a day’s hard work, my blog is successfully included by baidu and google,and I add some new features  to my blog for attracting more people to visit.</p><p>As we all know,photo is a good way to look back  our experience,so I specially add Photo to my blog.I  change the background of my blog,making it not monotonous.The big change is that my blog language is changed to Engelish and I begin to write blog in English ,thanks to my classmate Uncle_drew’s idea,and thanks for his blog ,I learn a lot from it. Thank you  @   <a href="https://cndrew.cn/" target="_blank" rel="noopener">https://cndrew.cn/</a></p><p>Lastly,I sincerely hope that I can insist writing blog .</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1556790582486&di=2934204990ec16c6de9d450cc19c179f&imgtype=0&src=http%3A%2F%2Fimg.bimg.126.net%2Fphoto%2FRuJiIKuWi5yyT9CXZPCL1w%3D%3D%2F4849813848741642194.jpg" width="80%"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;A-New-Start&quot;&gt;&lt;a href=&quot;#A-New-Start&quot; class=&quot;headerlink&quot; title=&quot;A New Start&quot;&gt;&lt;/a&gt;A New Start&lt;/h1&gt;&lt;p&gt;This is a nice day!!!&lt;/p&gt;
&lt;p&gt;After
      
    
    </summary>
    
      <category term="life" scheme="https://angelni.github.io/categories/life/"/>
    
    
      <category term="life" scheme="https://angelni.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Poetry Appreciation</title>
    <link href="https://angelni.github.io/Poetry-Appreciation.html"/>
    <id>https://angelni.github.io/Poetry-Appreciation.html</id>
    <published>2019-05-01T23:39:47.000Z</published>
    <updated>2019-05-02T00:43:14.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Poetry-Appreciation"><a href="#Poetry-Appreciation" class="headerlink" title="Poetry Appreciation"></a>Poetry Appreciation</h1><p>I think poetry is a kind of life experience,a kind  of inner sublimation.Cultivate sentiment and enrich oneself.</p><p><img src="https://faithlove.github.io/pic/2018/DynamicProxy/topPicPre.png" width="100%"></p><a id="more"></a><h3 id="木兰花令"><a href="#木兰花令" class="headerlink" title="木兰花令"></a>木兰花令</h3><p>——纳兰性德</p><p>人生若只如初见，何事秋风悲画扇?等闲变却故人心，却道故人心易变。</p><p>骊山语罢清宵半，泪雨零铃终不怨。何如薄幸锦衣郎，比翼连枝当日愿。</p><h3 id="仓央嘉措《四》"><a href="#仓央嘉措《四》" class="headerlink" title="仓央嘉措《四》"></a>仓央嘉措《四》</h3><p>好多年了</p><p>你一直在我的伤口中幽居</p><p>我放下过天地</p><p>却从未放下过你</p><p>我生命中的千山万水</p><p>任你一一告别</p><p>世间事</p><p>除了生死</p><p>哪一件不是闲事</p><p>谁的隐私不被回光返照</p><p>殉葬的花朵开合有度</p><p>菩提的果实奏响了空山</p><p>告诉我</p><p>你藏在落叶下的那些脚印</p><p>暗示着多少祭日</p><p>专供我在法外逍遥</p><h3 id="致橡树"><a href="#致橡树" class="headerlink" title="致橡树"></a>致橡树</h3><p>——舒婷</p><p>我如果爱你——绝不像攀援的凌霄花，借你的高枝炫耀自己；</p><p>我如果爱你——绝不学痴情的鸟儿，为绿荫重复单调的歌曲；</p><p>也不止像泉源，常年送来清凉的慰藉；</p><p>也不止像险峰，增加你的高度，衬托你的威仪。甚至日光，甚至春雨。</p><p>不，这些都还不够！</p><p>我必须是你近旁的一株木棉，作为树的形象和你站在一起。</p><p>根，紧握在地下；叶，相触在云里。</p><p>每一阵风过，我们都互相致意，但没有人，听懂我们的言语。</p><p>你有你的铜枝铁干，像刀，像剑，也像戟；我有我红硕的花朵，像沉重的叹息，又像英勇的火炬。</p><p>我们分担寒潮、风雷、霹雳；我们共享雾霭、流岚、虹霓。</p><p>仿佛永远分离，却又终身相依。</p><p>这才是伟大的爱情，坚贞就在这里：</p><p>爱——不仅爱你伟岸的身躯，也爱你坚持的位置，足下的土地。</p><h3 id="一棵开花的树"><a href="#一棵开花的树" class="headerlink" title="一棵开花的树"></a>一棵开花的树</h3><p>——席慕蓉</p><p>如何让你遇见我</p><p>在我最美丽的时刻</p><p>为这</p><p>我已在佛前求了五百年</p><p>求佛让我们结一段尘缘</p><p>佛於是把我化做一棵树</p><p>长在你必经的路旁</p><p>阳光下</p><p>慎重地开满了花</p><p>朵朵都是我前世的盼望</p><p>当你走近</p><p>请你细听</p><p>那颤抖的叶</p><p>是我等待的热情</p><p>而当你终於无视地走过</p><p>在你身後落了一地的</p><p>朋友啊</p><p>那不是花瓣</p><p>那是我凋零的心</p><h3 id="热爱生命"><a href="#热爱生命" class="headerlink" title="热爱生命"></a>热爱生命</h3><p>——汪国真</p><p>我不去想是否能够成功</p><p>既然选择了远方</p><p>便只顾风雨兼程</p><p>我不去想能否赢得爱情</p><p>既然钟情于玫瑰</p><p>就勇敢地吐露真诚</p><p>我不去想身后会不会袭来寒风冷雨</p><p>既然目标是地平线</p><p>留给世界的只能是背影</p><p>我不去想未来是平坦还是泥泞</p><p>只要热爱生命</p><p>一切，都在意料之中</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Poetry-Appreciation&quot;&gt;&lt;a href=&quot;#Poetry-Appreciation&quot; class=&quot;headerlink&quot; title=&quot;Poetry Appreciation&quot;&gt;&lt;/a&gt;Poetry Appreciation&lt;/h1&gt;&lt;p&gt;I think poetry is a kind of life experience,a kind  of inner sublimation.Cultivate sentiment and enrich oneself.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://faithlove.github.io/pic/2018/DynamicProxy/topPicPre.png&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="文学" scheme="https://angelni.github.io/categories/%E6%96%87%E5%AD%A6/"/>
    
    
      <category term="文学" scheme="https://angelni.github.io/tags/%E6%96%87%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>HTML学习</title>
    <link href="https://angelni.github.io/HTML%E5%AD%A6%E4%B9%A0.html"/>
    <id>https://angelni.github.io/HTML学习.html</id>
    <published>2019-05-01T09:33:59.000Z</published>
    <updated>2019-05-02T12:42:11.287Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTNL——Begin"><a href="#HTNL——Begin" class="headerlink" title="HTNL——Begin"></a>HTNL——Begin</h1><p>Hyper Text Markup Language ，short for HTML ,is a standard markup language for creating web pages.The web pages which we usually scan are written by it.I want to learn a fewer about it because of writing blog and modifying my blog’s framework.</p><p>I need it.</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1556808682080&di=1faa55d20d458738c6537913a107772b&imgtype=0&src=http%3A%2F%2Fa2.att.hudong.com%2F13%2F86%2F01300000165488122499865118637.jpg" width="80%"></p><a id="more"></a><h3 id="The-simply-example"><a href="#The-simply-example" class="headerlink" title="The simply example"></a>The simply example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;this is a title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;First level title&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;paragraph&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>explanation</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;  声明HTML5文档</span><br><span class="line">&lt;html&gt;元素是HTML页面的根元素</span><br><span class="line">&lt;head&gt;元素包含了文档的元数据</span><br><span class="line">&lt;title&gt;文档的标题</span><br><span class="line">&lt;body&gt;可见的页面内容</span><br><span class="line">&lt;h1&gt;一级标题</span><br><span class="line">&lt;p&gt;段落</span><br><span class="line">&lt;meta charset = &quot;utf-8&quot;&gt;声明编码utf-8</span><br></pre></td></tr></table></figure><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><h5 id="1-HTML-link"><a href="#1-HTML-link" class="headerlink" title="1.HTML link"></a>1.HTML link</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;http://baidu.com&quot;&gt;This is baidu link&lt;/a&gt;</span><br></pre></td></tr></table></figure><h5 id="2-picture"><a href="#2-picture" class="headerlink" title="2.picture"></a>2.picture</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;imag scr=&quot;(url)&quot; width=&quot;258&quot; height=&quot;39&quot; /&gt;</span><br></pre></td></tr></table></figure><h5 id="3-lind-feed"><a href="#3-lind-feed" class="headerlink" title="3.lind feed"></a>3.lind feed</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;br/&gt;</span><br></pre></td></tr></table></figure><h5 id="4-level"><a href="#4-level" class="headerlink" title="4.level"></a>4.level</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;hr&gt;</span><br></pre></td></tr></table></figure><h5 id="5-notes"><a href="#5-notes" class="headerlink" title="5.notes"></a>5.notes</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--notes--&gt;</span><br></pre></td></tr></table></figure><h5 id="6-bold"><a href="#6-bold" class="headerlink" title="6.bold"></a>6.bold</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt; bold &lt;/b&gt;</span><br></pre></td></tr></table></figure><p>I simply learned basics of HTML.Maybe it is very simply ,but it’s a new stduy.Come on  !!!</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTNL——Begin&quot;&gt;&lt;a href=&quot;#HTNL——Begin&quot; class=&quot;headerlink&quot; title=&quot;HTNL——Begin&quot;&gt;&lt;/a&gt;HTNL——Begin&lt;/h1&gt;&lt;p&gt;Hyper Text Markup Language ，short for HTML ,is a standard markup language for creating web pages.The web pages which we usually scan are written by it.I want to learn a fewer about it because of writing blog and modifying my blog’s framework.&lt;/p&gt;
&lt;p&gt;I need it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1556808682080&amp;di=1faa55d20d458738c6537913a107772b&amp;imgtype=0&amp;src=http%3A%2F%2Fa2.att.hudong.com%2F13%2F86%2F01300000165488122499865118637.jpg&quot; width=&quot;80%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HTML" scheme="https://angelni.github.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="https://angelni.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>天生棋局(指针)</title>
    <link href="https://angelni.github.io/%E5%A4%A9%E7%94%9F%E6%A3%8B%E5%B1%80-%E6%8C%87%E9%92%88.html"/>
    <id>https://angelni.github.io/天生棋局-指针.html</id>
    <published>2019-04-25T14:20:45.000Z</published>
    <updated>2019-05-02T04:12:45.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="天生棋局（指针）"><a href="#天生棋局（指针）" class="headerlink" title="天生棋局（指针）"></a>天生棋局（指针）</h1><p>上次用数组写的天生棋局题，这里补上指针版的。</p><p><img src="/天生棋局-指针/1.png" alt="天生棋局/1.png"></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><strong>中国传统文化源远流长，博大精深，包含着华夏先哲的无穷智慧，也是历朝历代炎黄子孙生活的缩影。围棋作为中华民族流传已久的一种策略性棋牌游戏，蕴含着丰富的汉民族文化内涵，是中国文明与中华文化的体现。本案例要求创建一个棋盘，在棋盘生成的同时初始化棋盘，根据初始化后棋盘中棋子的位置来判断此时的棋局是否是一局好棋。具体要求如下：**</strong></p><p><strong>1）棋盘的大小根据用户的指令确定；</strong></p><p><strong>2）棋盘中棋子的数量也由用户设定；</strong></p><p><strong>3）棋子的位置由随机数函数随机确定，若生成的棋盘中有两颗棋子落在同一行或同一列，则判定为“好棋”，否则判定为“不是好棋”。</strong></p><h2 id="注释"><a href="#注释" class="headerlink" title="#注释"></a>#注释</h2><p>天生棋局指针类型的和上次数组类型的大体思路是一样的，在这里主要不同的，在于用calloc（）函数申请一个动态的存储空间，因为calloc（）函数成功生成动态存储空间会返回储存空间的首地址，所以在这里用指针类型的变量来实现对动态存储空间的操作。</p><p>这里主要用二维指针，二维指针储存一维指针的地址，二维指针可以看做二维数组，而二维数组可以看做由一维数组组生成，这样理解起来比较简单些</p><p>附上关键自定义生成动态存储函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> int ** board(int n)</span><br><span class="line">&#123;</span><br><span class="line">int ** p = (int **)calloc(sizeof(int*), n);//calloc在内存中分配n*size大小的动态存储空间，返回一个起始地址的一个指针 </span><br><span class="line">for (int i = 0; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i] = (int *)calloc(sizeof(int), n);</span><br><span class="line">&#125;</span><br><span class="line">return p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;time.h&gt;</span><br><span class="line">int ** board(int n);      //申请动态存储空间 </span><br><span class="line">void inkey(int **p,int n,int m);//用随机数下棋 </span><br><span class="line">void printboard(int **p,int n);//打印棋格 </span><br><span class="line">int check(int **p,int n);//检查好/坏棋 </span><br><span class="line">void freespace(int **p,int n);//释放动态空间 </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n,m,con;</span><br><span class="line">printf(&quot;请输入棋盘大小:\n&quot;);</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">printf(&quot;请输入棋子数量:\n&quot;);</span><br><span class="line">scanf(&quot;%d&quot;,&amp;m);</span><br><span class="line">int **p=board(n);</span><br><span class="line">inkey( p ,n, m );</span><br><span class="line">printboard(p,n);</span><br><span class="line">con=check(p,n);</span><br><span class="line">freespace(p,n);</span><br><span class="line">if(con)</span><br><span class="line">printf(&quot;好棋！&quot;);</span><br><span class="line">else</span><br><span class="line">printf(&quot;不是好棋！&quot;); </span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line"> &#125; </span><br><span class="line"> int ** board(int n)</span><br><span class="line">&#123;</span><br><span class="line">int ** p = (int **)calloc(sizeof(int*), n);//calloc在内存中分配n*size大小的动态存储空间，返回一个起始地址的一个指针 </span><br><span class="line">for (int i = 0; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i] = (int *)calloc(sizeof(int), n);</span><br><span class="line">&#125;</span><br><span class="line">return p;</span><br><span class="line">&#125;</span><br><span class="line">void inkey(int **p,int n,int m)</span><br><span class="line">&#123;</span><br><span class="line">srand((unsigned int)time(NULL));  //随机数种子   生成伪随机数，每次的随机数都不一样 </span><br><span class="line">while(m--)</span><br><span class="line">&#123;</span><br><span class="line">int a=rand()%n,b=rand()%n;</span><br><span class="line">p[a][b]=1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void printboard(int **p,int n)</span><br><span class="line">&#123;</span><br><span class="line">for(int i=0;i&lt;n;i++)//  生  成  棋  盘 </span><br><span class="line">&#123;</span><br><span class="line">for(int j =0;j&lt;n;j++)        //   ┏ ┓┗ ┛┠ ┷ ┨ ┯ ┼ ●</span><br><span class="line">&#123;</span><br><span class="line">if(p[i][j]==1)</span><br><span class="line">printf(&quot;●&quot;);</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">if (i == 0 &amp;&amp; j == 0)    </span><br><span class="line">printf(&quot;┏&quot;);</span><br><span class="line">else if (i == 0 &amp;&amp; j == n - 1)</span><br><span class="line">printf(&quot;┓&quot;);</span><br><span class="line">else if (i == n - 1 &amp;&amp; j == 0)</span><br><span class="line">printf(&quot;┗&quot;);</span><br><span class="line">else if (i == n - 1 &amp;&amp; j == n - 1)</span><br><span class="line">printf(&quot;┛&quot;);</span><br><span class="line">else if (j == 0)</span><br><span class="line">printf(&quot;┠&quot;);</span><br><span class="line">else if (i == n - 1)</span><br><span class="line">printf(&quot;┷&quot;);</span><br><span class="line">else if (j == n - 1)</span><br><span class="line">printf(&quot;┨&quot;);</span><br><span class="line">else if (i == 0)</span><br><span class="line">printf(&quot;┯&quot;);</span><br><span class="line">else</span><br><span class="line">printf(&quot;┼&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">putchar(&apos;\n&apos;);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">int check(int **p,int n)</span><br><span class="line">&#123;</span><br><span class="line">int flag = 0;    //   默认不是好棋。 </span><br><span class="line">for(int i=0;i&lt;n;i++)// 判断 好棋 坏棋 </span><br><span class="line">&#123;</span><br><span class="line">for(int j=0;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line">if (p[i][j] == 1)</span><br><span class="line">&#123;</span><br><span class="line">if (j&gt;0 &amp;&amp; p[i][j-1] == 1)//判断同一行有无相邻棋子</span><br><span class="line">&#123;</span><br><span class="line">flag = 1; </span><br><span class="line">&#125;</span><br><span class="line">if (i &gt;0 &amp;&amp; p[i-1][j] == 1)//判断同一列有无相邻棋子</span><br><span class="line">&#123;</span><br><span class="line">flag = 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">return flag;</span><br><span class="line">&#125;</span><br><span class="line">void freespace(int **p,int n)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">for (int i= 0; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">free(p[i]);//释放一级指针指向的空间</span><br><span class="line">&#125;</span><br><span class="line">free(p);//释放二级指针指向的空间</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;天生棋局（指针）&quot;&gt;&lt;a href=&quot;#天生棋局（指针）&quot; class=&quot;headerlink&quot; title=&quot;天生棋局（指针）&quot;&gt;&lt;/a&gt;天生棋局（指针）&lt;/h1&gt;&lt;p&gt;上次用数组写的天生棋局题，这里补上指针版的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/天生棋局-指针/1.png&quot; alt=&quot;天生棋局/1.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C++/C" scheme="https://angelni.github.io/categories/C-C/"/>
    
    
      <category term="C++/C" scheme="https://angelni.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>sort()函数</title>
    <link href="https://angelni.github.io/sort%E5%87%BD%E6%95%B0.html"/>
    <id>https://angelni.github.io/sort函数.html</id>
    <published>2019-04-22T13:37:38.000Z</published>
    <updated>2019-05-02T06:11:47.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-中的sort（）函数"><a href="#C-中的sort（）函数" class="headerlink" title="C++中的sort（）函数"></a>C++中的sort（）函数</h1><p>我在之前的博客中提到，解决排序问题的一个好用的函数就是C++的sort（）函数啦。sort（）函数是C++内置的函数，只需要加入头文件，掌握正确的使用方法，你就可以在排序中驰骋疆场了（自吹自擂~）。好啦，下面就请主角登场吧~~ </p><p><img src="http://pic1.win4000.com/wallpaper/0/5865fa41d9cf5.jpg" width="100%"></p><a id="more"></a><h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h4><p>c++语言中 STL 库中的sort函数可以用来对数组进行排序。对于c++语言来说由于其自带的sort()函数更容易被编译器编译，其排序速度比基于快速排序的qsort要快上不少，且用法简单。(百度知道)</p><h4 id="2-准备"><a href="#2-准备" class="headerlink" title="2.准备"></a>2.准备</h4><p>sort（）函数的使用需要添加头文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">或者万能头文件</span><br><span class="line">#include&lt;bits/stdc++.h&gt;</span><br></pre></td></tr></table></figure><h4 id="3-使用方法"><a href="#3-使用方法" class="headerlink" title="3.使用方法"></a>3.使用方法</h4><p><strong><u>sort（star,end,cmp）</u>*</strong></p><p>sort函数有三个参数：</p><p>1.第一个是要排序的数组的起始地址</p><p>2.第二个是结束地址（最后一位的地址的下一地址）</p><p>3.第三个参数是排序的方法。sort函数默认是按从小到大排序。可以修改cmp实现从大到小排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sort（begin，end，less&lt;data-type&gt;)——升序</span><br><span class="line"></span><br><span class="line">sort（begin，end，greater&lt;data-type&gt;)——降序</span><br></pre></td></tr></table></figure><p>以上是比较简单常用的对数组的排序方法，sort（）类函数中还有其他的排序功能。</p><h4 id="4-sort-类函数"><a href="#4-sort-类函数" class="headerlink" title="4.sort()类函数"></a>4.sort()类函数</h4><table><thead><tr><th style="text-align:center">函数名</th><th style="text-align:center">功能描述</th></tr></thead><tbody><tr><td style="text-align:center">sort</td><td style="text-align:center">对给定区间所有元素进行排序</td></tr><tr><td style="text-align:center">stable_sort</td><td style="text-align:center">对给定区间所有元素进行稳定排序</td></tr><tr><td style="text-align:center">partial_sort</td><td style="text-align:center">对给定区间所有元素进行稳定排序</td></tr><tr><td style="text-align:center">partial_sort</td><td style="text-align:center">对给定区间所有元素部分排序</td></tr><tr><td style="text-align:center">partial_sort_copy</td><td style="text-align:center">对给定区间复制并排序</td></tr><tr><td style="text-align:center">nth_element</td><td style="text-align:center">找出给定区间的某个位置对应的元素</td></tr><tr><td style="text-align:center">is_sorted</td><td style="text-align:center">判断一个区间是否已经排好序</td></tr><tr><td style="text-align:center">partition</td><td style="text-align:center">使得符合某个条件的元素放在前面</td></tr><tr><td style="text-align:center">stable_partition</td><td style="text-align:center">相对稳定的使得符合某个条件的元素放在前面</td></tr></tbody></table><h4 id="5-sort（）函数练习"><a href="#5-sort（）函数练习" class="headerlink" title="5.sort（）函数练习"></a>5.sort（）函数练习</h4><h6 id="1-有序序列合并"><a href="#1-有序序列合并" class="headerlink" title="1.有序序列合并"></a>1.有序序列合并</h6><p>链接：</p><p><a href="https://ac.nowcoder.com/acm/contest/827/J" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/827/J</a></p><p>来源：牛客网</p><p>题目描述   </p><p>输入两个升序排列的序列，将两个序列合并为一个有序序列并输出。</p><p>输入描述:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入包含三行，</span><br><span class="line"></span><br><span class="line">第一行包含两个正整数n, m（1 ≤ n,m ≤ 100），用空格分隔。n表示第二行第一个升序序列中数字的个数，m表示第三行第二个升序序列中数字的个数。</span><br><span class="line"></span><br><span class="line">第二行包含n个整数（范围1~5000），用空格分隔。</span><br><span class="line"></span><br><span class="line">第三行包含m个整数（范围1~5000），用空格分隔。</span><br></pre></td></tr></table></figure><p>输出描述:</p><p>输出为一行，输出长度为n+m的升序序列，即长度为n的升序序列和长度为m的升序序列中的元素重新进行升序序列排列合并。</p><p><strong>示例1</strong></p><p>输入<br>5 6<br>1 3 7 9 22<br>2 8 10 17 33 44<br>输出<br>1 2 3 7 8 9 10 17 22 33 44</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int n,m,t;</span><br><span class="line">int a[100],b[100],c[200];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    t=n;</span><br><span class="line">    for(int i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        c[i]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    for(int i=0;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;b[i];</span><br><span class="line">        c[t++]=b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(c,c+m+n);</span><br><span class="line">    for(int i=0;i&lt;m+n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;c[i];</span><br><span class="line">        putchar(&apos; &apos;);</span><br><span class="line">    &#125;          </span><br><span class="line">    return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h6 id="2-最高最低分差"><a href="#2-最高最低分差" class="headerlink" title="2.最高最低分差"></a>2.最高最低分差</h6><p>链接：</p><p><a href="https://ac.nowcoder.com/acm/contest/827/E" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/827/E</a></p><p>来源：牛客网</p><p>题目描述   </p><p>输入n个成绩，换行输出n个成绩中最高分数和最低分数的差。</p><p>输入描述:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">两行，第一行为n，表示n个成绩，不会大于10000。</span><br><span class="line"></span><br><span class="line">第二行为n个成绩（整数表示，范围0~100），以空格隔开。</span><br></pre></td></tr></table></figure><p>输出描述:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一行，输出n个成绩中最高分数和最低分数的差。</span><br></pre></td></tr></table></figure><p> 示例1 </p><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">98 100 99 97 95 99 98 97 96 100</span><br></pre></td></tr></table></figure><p>输出</p><p>5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,a[10000],sum=0;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(int i=0;i&lt;n;i++)</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">    sort(a,a+n);</span><br><span class="line">    sum=a[n-1]-a[0];</span><br><span class="line">    printf(&quot;%d&quot;,sum);</span><br><span class="line">    return 0;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="休息一下"><a href="#休息一下" class="headerlink" title="休息一下"></a>休息一下</h3><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=2788529&auto=0&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-中的sort（）函数&quot;&gt;&lt;a href=&quot;#C-中的sort（）函数&quot; class=&quot;headerlink&quot; title=&quot;C++中的sort（）函数&quot;&gt;&lt;/a&gt;C++中的sort（）函数&lt;/h1&gt;&lt;p&gt;我在之前的博客中提到，解决排序问题的一个好用的函数就是C++的sort（）函数啦。sort（）函数是C++内置的函数，只需要加入头文件，掌握正确的使用方法，你就可以在排序中驰骋疆场了（自吹自擂~）。好啦，下面就请主角登场吧~~ &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pic1.win4000.com/wallpaper/0/5865fa41d9cf5.jpg&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C++/C" scheme="https://angelni.github.io/categories/C-C/"/>
    
    
      <category term="C++/C" scheme="https://angelni.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>深度优先搜索(DFS)</title>
    <link href="https://angelni.github.io/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-DFS.html"/>
    <id>https://angelni.github.io/深度优先搜索-DFS.html</id>
    <published>2019-04-22T11:59:26.000Z</published>
    <updated>2019-05-02T05:47:59.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深度优先搜索-DFS"><a href="#深度优先搜索-DFS" class="headerlink" title="深度优先搜索(DFS)"></a>深度优先搜索(DFS)</h1><h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><p>深度优先搜索算法（Depth-First-Search），是搜索算法的一种。是沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点v的所有边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止（属于盲目搜索）。</p><p><img src="/深度优先搜索-DFS/7.jpg" alt></p><a id="more"></a><p>“一路走到头，不撞墙不回头”</p><p>​        深度优先搜索属于图算法的一种，是一个针对图和树的遍历算法，英文缩写为DFS即Depth First Search。深度优先搜索是图论中的经典算法，利用深度优先搜索算法可以产生目标图的相应拓扑排序表，利用拓扑排序表可以方便的解决很多相关的图论问题，如最大路径问题等等。一般用堆数据结构来辅助实现DFS算法。其过程简要来说是对每一个可能的分支路径深入到不能再深入为止，而且每个节点只能访问一次。</p><h2 id="树状图图解"><a href="#树状图图解" class="headerlink" title="树状图图解"></a>树状图图解</h2><p>例如，想要从1到9，每到一个岔路口你有两种选择，你可以选择左枝，或者右枝，共两种可能，但是当你走到死胡同时，你只能原路返回，走到这个死胡同的上一个路口，走另一条路，依次类推，直到走到终点，也就是九。你可能会问，这不明摆着呢吗，直接从1经过8到9不就行了。没错，这是最直接的办法，但计算机傻啊，没有你聪明啊，它只会，一次一次的尝试，直到最终结果。</p><p>下面是图解</p><p><img src="/深度优先搜索-DFS/2.jpg" alt></p><p><img src="/深度优先搜索-DFS/1.png" alt></p><p><img src="/深度优先搜索-DFS/2.png" alt></p><p><img src="/深度优先搜索-DFS/3.png" alt></p><p><img src="/深度优先搜索-DFS/4.png" alt></p><p><img src="/深度优先搜索-DFS/5.png" alt></p><p><img src="/深度优先搜索-DFS/6.png" alt></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>给定整数a1、a2、…….an，判断是否可以从中选出若干数，使它们的和恰好为K。</p><p>输入</p><p>首先，n和k，n表示数的个数，k表示数的和。<br>接着一行n个数。<br>（1&lt;=n&lt;=20,保证不超int范围）</p><p>输出</p><p>如果和恰好可以为k，输出“YES”，否则“NO”</p><p>样例输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4 13</span><br><span class="line"></span><br><span class="line">1 2 4 7</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>每一个数有加与不加两种可能，从树的一枝不加到尾，然后，再从叶末返回上一层叶节点，走另一个分支，也就是加上最后一个，与所求的和比较，不符再重复上述操作。直到找到与所求和相等返回Yes</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int n,k,a[50];</span><br><span class="line">int dfs(int i,int sum)</span><br><span class="line">&#123;</span><br><span class="line">if(i==n) </span><br><span class="line">return sum==k;</span><br><span class="line">if(dfs(i+1,sum))</span><br><span class="line">return 1;</span><br><span class="line">if(dfs(i+1,sum+=a[i]))</span><br><span class="line">return 1; </span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">for(int i=0;i&lt;n;i++)</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">if(dfs(0,0))</span><br><span class="line">cout&lt;&lt;&quot;YES&quot;&lt;&lt;endl;</span><br><span class="line">else</span><br><span class="line">cout&lt;&lt;&quot;No!&quot;&lt;&lt;endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;深度优先搜索-DFS&quot;&gt;&lt;a href=&quot;#深度优先搜索-DFS&quot; class=&quot;headerlink&quot; title=&quot;深度优先搜索(DFS)&quot;&gt;&lt;/a&gt;深度优先搜索(DFS)&lt;/h1&gt;&lt;h2 id=&quot;DFS&quot;&gt;&lt;a href=&quot;#DFS&quot; class=&quot;headerlink&quot; title=&quot;DFS&quot;&gt;&lt;/a&gt;DFS&lt;/h2&gt;&lt;p&gt;深度优先搜索算法（Depth-First-Search），是搜索算法的一种。是沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点v的所有边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止（属于盲目搜索）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/深度优先搜索-DFS/7.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://angelni.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://angelni.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>天生棋局</title>
    <link href="https://angelni.github.io/%E5%A4%A9%E7%94%9F%E6%A3%8B%E5%B1%80.html"/>
    <id>https://angelni.github.io/天生棋局.html</id>
    <published>2019-04-22T05:49:31.000Z</published>
    <updated>2019-05-02T04:09:31.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目：天生棋局"><a href="#题目：天生棋局" class="headerlink" title="题目：天生棋局"></a>题目：天生棋局</h1><p>天生棋局问题，是C语言老师留的一个课外练习题。要求有用指针来写，因为指针学的不扎实，也因为第一次看到这道题时，第一个想法就是要用数组来写，所以以下是用数组对天生棋局代码。(指针的会后续补上)</p><p><img src="/天生棋局/3.jpg" alt><a id="more"></a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><strong>中国传统文化源远流长，博大精深，包含着华夏先哲的无穷智慧，也是历朝历代炎黄子孙生活的缩影。围棋作为中华民族流传已久的一种策略性棋牌游戏，蕴含着丰富的汉民族文化内涵，是中国文明与中华文化的体现。本案例要求创建一个棋盘，在棋盘生成的同时初始化棋盘，根据初始化后棋盘中棋子的位置来判断此时的棋局是否是一局好棋。具体要求如下：**</strong> </p><p><strong>1）棋盘的大小根据用户的指令确定；</strong></p><p><strong>2）棋盘中棋子的数量也由用户设定；</strong></p><p><strong>3）棋子的位置由随机数函数随机确定，若生成的棋盘中有两颗棋子落在同一行或同一列，则判定为“好棋”，否则判定为“不是好棋”。</strong> </p><h3 id="题前注释"><a href="#题前注释" class="headerlink" title="题前注释"></a>题前注释</h3><h5 id="1-随机数"><a href="#1-随机数" class="headerlink" title="1.随机数"></a>1.随机数</h5><p><strong>头文件</strong>：</p><p><code>#include&lt;stdlib.h&gt; And #include&lt;time.h&gt;</code></p><p><strong>函数</strong>：</p><p>1.<strong>rand()</strong>函数生成伪随机数。</p><p>2.随机发生器的初始化函数`<strong>srand(unsigned seed)</strong></p><p><strong>目的</strong>：</p><p>​    <strong>rand（）</strong>函数是按指定的顺序来产生整数，但可能两次的随机数相同并不是真正的随机，叫做伪随机数。而随机发生器的初始化函数`<strong>srand(unsigned seed)（也位于stdlib.h）</strong>进行伪随机数列初始化，通过用时间函数<strong>time（NULL）</strong>作为<strong>seed</strong>，使每一次产生的随机数都不一样。</p><h5 id="2-棋盘，棋子"><a href="#2-棋盘，棋子" class="headerlink" title="2.棋盘，棋子"></a>2.棋盘，棋子</h5><p>这是一个下棋的游戏，如果把随机的产生的棋子赤果果地展现在棋盘上，效果会很明显，并且题目说要生成棋盘，所以首先要打印一个棋盘</p><p>打印棋盘，首先要有边框和棋子，这些是从word上copy来的,然后用双层循环就可以了。</p><h5 id="3-判断好-坏棋"><a href="#3-判断好-坏棋" class="headerlink" title="3.判断好/坏棋"></a>3.判断好/坏棋</h5><p>根据题意即可</p><h3 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h3><p>根据题意，他说<strong>若生成的棋盘中有两颗棋子落在同一行或同一列，则判定为“好棋”，否则判定为“不是好棋”。</strong>但与查的资料不同，说是两颗棋子相邻是好棋。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;time.h&gt; </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">srand((unsigned int)time(NULL));    //   生成伪随机数，每次的随机数都不一样 </span><br><span class="line">int n,m;</span><br><span class="line">unsigned long kb[700][700];         //默认最大棋盘大小 </span><br><span class="line">printf(&quot;请输入棋盘大小： &quot;);</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">printf(&quot;请输入棋子数量： &quot;);</span><br><span class="line">scanf(&quot;%d&quot;,&amp;m);</span><br><span class="line">while(m--)//生成  0 ~ n-1  的随机数  并赋值为 1 </span><br><span class="line">&#123;</span><br><span class="line">int a=rand()%n,b=rand()%n;      </span><br><span class="line">kb[a][b]=1;</span><br><span class="line">&#125;</span><br><span class="line">for(int i=0;i&lt;n;i++)//  生  成  棋  盘 </span><br><span class="line">&#123;</span><br><span class="line">for(int j =0;j&lt;n;j++)        //   ┏┓┗┛┠┷┨┯┼●</span><br><span class="line">&#123;</span><br><span class="line">if(kb[i][j]==1)</span><br><span class="line">printf(&quot;●&quot;);</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">if (i == 0 &amp;&amp; j == 0)    </span><br><span class="line">printf(&quot;┏ &quot;);</span><br><span class="line">else if (i == 0 &amp;&amp; j == n - 1)</span><br><span class="line">printf(&quot;┓ &quot;);</span><br><span class="line">else if (i == n - 1 &amp;&amp; j == 0)</span><br><span class="line">printf(&quot;┗ &quot;);</span><br><span class="line">else if (i == n - 1 &amp;&amp; j == n - 1)</span><br><span class="line">printf(&quot;┛ &quot;);</span><br><span class="line">else if (j == 0)</span><br><span class="line">printf(&quot;┠ &quot;);</span><br><span class="line">else if (i == n - 1)</span><br><span class="line">printf(&quot;┷ &quot;);</span><br><span class="line">else if (j == n - 1)</span><br><span class="line">printf(&quot;┨ &quot;);</span><br><span class="line">else if (i == 0)</span><br><span class="line">printf(&quot;┯ &quot;);</span><br><span class="line">else</span><br><span class="line">printf(&quot;┼ &quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">putchar(&apos;\n&apos;);</span><br><span class="line">&#125; </span><br><span class="line">int flag = 0;    //   默认不是好棋。 </span><br><span class="line">for(int i=0;i&lt;n;i++)// 判断 好棋 坏棋 </span><br><span class="line">&#123;</span><br><span class="line">for(int j=0;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line">if (kb[i][j] == 1)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">if (j&gt;0 &amp;&amp; kb[i][j-1] == 1)//判断同一行有无相邻棋子</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;好棋！\n&quot;);</span><br><span class="line">flag = 1; </span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">if (i &gt;0 &amp;&amp; kb[i-1][j] == 1)//判断同一列有无相邻棋子</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;好棋！\n&quot;);</span><br><span class="line">flag = 1;</span><br><span class="line">break; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">if(flag == 0)</span><br><span class="line">printf(&quot;不是好棋&quot;);</span><br><span class="line">return 0; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="/天生棋局/1.png" alt></p><p><img src="/天生棋局/2.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目：天生棋局&quot;&gt;&lt;a href=&quot;#题目：天生棋局&quot; class=&quot;headerlink&quot; title=&quot;题目：天生棋局&quot;&gt;&lt;/a&gt;题目：天生棋局&lt;/h1&gt;&lt;p&gt;天生棋局问题，是C语言老师留的一个课外练习题。要求有用指针来写，因为指针学的不扎实，也因为第一次看到这道题时，第一个想法就是要用数组来写，所以以下是用数组对天生棋局代码。(指针的会后续补上)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/天生棋局/3.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C++/C" scheme="https://angelni.github.io/categories/C-C/"/>
    
    
      <category term="算法" scheme="https://angelni.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C++/C" scheme="https://angelni.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C++初学</title>
    <link href="https://angelni.github.io/C++%E5%88%9D%E5%AD%A6.html"/>
    <id>https://angelni.github.io/C++初学.html</id>
    <published>2019-04-18T13:44:41.000Z</published>
    <updated>2019-05-02T04:08:14.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-初学（一）"><a href="#C-初学（一）" class="headerlink" title="C++ 初学（一）"></a>C++ 初学（一）</h1><p>在一次解决排序问题时，初步接触C++中的sort（）函数，在问题解决上非常好用，不用自己再写排序的代码，就像python中 import 函数库一样，因为懒嘛，所以更懒，嘿嘿！！所以想接触一下C++，简单学习一下子。</p><p><img src="/C++初学/1.jpg" alt><a id="more"></a></p><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p>C++是C语言的继承，它既可以进行C语言的过程化程序设计，又可以进行以抽象数据类型为特点的基于对象的程序设计，还可以进行以继承和多态为特点的面向对象的程序设计。C++擅长面向对象程序设计的同时，还可以进行基于过程的程序设计，因而C++就适应的问题规模而论，大小由之。</p><p>C++ 是一种静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言，支持过程化编程、面向对象编程和泛型编程。</p><p>C++ 被认为是一种<strong>中级</strong>语言，它综合了高级语言和低级语言的特点。</p><p>C++ 是由 Bjarne Stroustrup 于 1979 年在新泽西州美利山贝尔实验室开始设计开发的。C++ 进一步扩充和完善了 C 语言，最初命名为带类的C，后来在 1983 年更名为 C++。</p><p>C++ 是 C 的一个超集，事实上，任何合法的 C 程序都是合法的 C++ 程序。</p><p>好了废话不多说，开始！</p><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;//</span><br><span class="line"> </span><br><span class="line">// main() 是程序开始执行的地方</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">   cout &lt;&lt; &quot;Hello World&quot;; // 输出 Hello World</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们讲解一下上面这段程序：</p><ul><li><p>C++ 语言定义了一些头文件，这些头文件包含了程序中必需的或有用的信息。上面这段程序中，包含了头文件 <strong><iostream></iostream></strong>。</p></li><li><p>下一行 <strong>using namespace std;</strong> 告诉编译器使用 std 命名空间。命名空间是 C++ 中一个相对新的概念。</p></li><li><p>下一行 <strong>// main() 是程序开始执行的地方</strong> 是一个单行注释。单行注释以 // 开头，在行末结束。</p></li><li><p>下一行 <strong>int main()</strong> 是主函数，程序从这里开始执行。</p></li><li><p>下一行 <strong>cout &lt;&lt; “Hello World”;</strong> 会在屏幕上显示消息 “Hello World”。</p></li><li><p>下一行 <strong>return 0;</strong> 终止 main( )函数，并向调用进程返回值 0。</p></li></ul><h4 id="输入、输出"><a href="#输入、输出" class="headerlink" title="输入、输出"></a>输入、输出</h4><p>C++的输出和输入是用“流”(stream)的方式实现的｡有关流对象cin､cout和流运算符的定义等信息是存放在C++的输入输出流库中的,因此如果在程序中使用cin､cout和流运算符,就必须使用预处理命令把头文件stream包含到本文件中:<br>    <code>#include &lt;iostream&gt;</code><br>尽管cin和cout不是C++本身提供的语句,但是在不致混淆的情况下,为了叙述方便,常常把由cin和流提取运算符“&gt;&gt;”实现输入的语句称为输入语句或cin语句,把由cout和流插入运算符“&lt;&lt;”实现输出的语句称为输出语句或cout语句｡根据C++的语法,凡是能实现某种操作而且最后以分号结束的都是语句｡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include &lt;iomanip&gt; </span><br><span class="line">//格式化输出的头文件，注意这里不要加.h</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a,b,c;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">cout&lt;&lt;a&lt;&lt;setw(2)&lt;&lt;b&lt;&lt;setw(2)&lt;&lt;c&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    float num1 = 123.456f,num2 = 563.1f,num3 = 1.30f;</span><br><span class="line">    float num4 = 123456.4444f;</span><br><span class="line">     cout &lt;&lt; setprecision(4);</span><br><span class="line">     cout &lt;&lt; &quot;第一个数：&quot; &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">     cout &lt;&lt; &quot;第二个数：&quot; &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">     cout &lt;&lt; &quot;第三个数：&quot; &lt;&lt; num3 &lt;&lt; endl;</span><br><span class="line">     cout &lt;&lt; &quot;第四个数：&quot; &lt;&lt; num4 &lt;&lt; endl;//endl 英语意思是end of line,即一行输出结束，然后输出下一行。</span><br><span class="line"></span><br><span class="line">return 0; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>头文件<code>#include&lt;iomanip&gt;</code>是格式化输出的头文件，注意后面不加  <strong>.h</strong>，</p><h6 id="使用setw-来控制占位宽度。"><a href="#使用setw-来控制占位宽度。" class="headerlink" title="使用setw()来控制占位宽度。"></a>使用setw()来控制占位宽度。</h6><p>注意事项</p><ol><li>setw() 虽然带有括号，但是其实是一个操作符，并不是函数。</li><li>setw() 主要引用头文件 iomanip 才能使用。</li><li>如果setw() 所约束的输出超过了限制，不会被截断。是多少位就输出多少位。</li><li>如果输出是浮点数，小数点也会占一个位。</li><li>如果输出是字符串，空格有段有效字符，占一个位。从上面的输出结果也可以看出来。</li><li>setw() 只能约束住跟自己相邻的一个输出。也就是说 </li></ol><h6 id="使用setprecision-控制浮点数有效位"><a href="#使用setprecision-控制浮点数有效位" class="headerlink" title="使用setprecision()控制浮点数有效位"></a>使用setprecision()控制浮点数有效位</h6><p>注意事项：</p><ol><li>setprecision() 同样是一个操作符，需要包含头文件 iomanip。</li><li>如果输出浮点数不足位，不会在其后面补0。</li><li>如果末尾有0，默认是不输出的。后面我们有其他方法可以输出末尾的0。</li><li>setprecision() 不同于setw()，setprecision() 设置之后，在下次设置之前都是有效的。从程序结果中可以看出来。</li><li>如果要输出的位数过多，则用科学计数法表示，10为基数。</li></ol><h6 id="setfioflags-控制定点输出"><a href="#setfioflags-控制定点输出" class="headerlink" title="setfioflags() 控制定点输出"></a>setfioflags() 控制定点输出</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">  </span><br><span class="line">using namespace std;</span><br><span class="line">  </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">     float num1 = 13.000f,num2 = 14.568f,num3 = 1.2f;</span><br><span class="line">     cout &lt;&lt; setiosflags(ios::fixed|ios::showpoint);</span><br><span class="line">     cout &lt;&lt; setprecision(4);</span><br><span class="line">     cout &lt;&lt; &quot;第一个数：&quot; &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">     cout &lt;&lt; &quot;第三个数：&quot; &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">     cout &lt;&lt; &quot;第二个数：&quot; &lt;&lt; num3 &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">     return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>setiosflags() 是通过状态标志来实现对输出的控制的。状态标志功能如下表</p><table><thead><tr><th style="text-align:left">状态标志</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">ios::left</td><td style="text-align:left">左对齐，右边填空格</td></tr><tr><td style="text-align:left">ios::dec</td><td style="text-align:left">所有整数以十进制输出</td></tr><tr><td style="text-align:left">ios::right</td><td style="text-align:left">右对齐，左边填空格</td></tr><tr><td style="text-align:left">ios::scientific</td><td style="text-align:left">以科学计数法形式输出浮点数</td></tr><tr><td style="text-align:left">ios::hex</td><td style="text-align:left">所有整数以十六进制输出</td></tr><tr><td style="text-align:left">ios::fixed</td><td style="text-align:left">以定点形式输出浮点数</td></tr><tr><td style="text-align:left">ios::oct</td><td style="text-align:left">所有整数以八进制输出</td></tr><tr><td style="text-align:left">ios::showpoint</td><td style="text-align:left">显示小数点和尾部的零</td></tr><tr><td style="text-align:left">ios::showpos</td><td style="text-align:left">在正数前面输出+</td></tr><tr><td style="text-align:left">ios::uppercase</td><td style="text-align:left">对于十六进制输出，使用大写字母表示</td></tr></tbody></table><p>setiosflags() 需要与 setprecision() 一起使用。如果状态标志设为 ios::fixed，那么setprecision()设置的数字，就表示小数位的个数，不足补零。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-初学（一）&quot;&gt;&lt;a href=&quot;#C-初学（一）&quot; class=&quot;headerlink&quot; title=&quot;C++ 初学（一）&quot;&gt;&lt;/a&gt;C++ 初学（一）&lt;/h1&gt;&lt;p&gt;在一次解决排序问题时，初步接触C++中的sort（）函数，在问题解决上非常好用，不用自己再写排序的代码，就像python中 import 函数库一样，因为懒嘛，所以更懒，嘿嘿！！所以想接触一下C++，简单学习一下子。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/C++初学/1.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="https://angelni.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://angelni.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>微小说欣赏</title>
    <link href="https://angelni.github.io/%E5%BE%AE%E5%B0%8F%E8%AF%B4%E6%AC%A3%E8%B5%8F.html"/>
    <id>https://angelni.github.io/微小说欣赏.html</id>
    <published>2019-04-18T13:09:58.000Z</published>
    <updated>2019-05-02T04:10:28.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微小说欣赏"><a href="#微小说欣赏" class="headerlink" title="微小说欣赏"></a>微小说欣赏</h1><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><p>我因车祸而失明，所以我从不知女友长什么样。那年，她得了胃癌，临终前她将眼角膜移植给了我。我恢复光明后的第一件事就是找她的照片，然而我只找到她留给我的一封信，信里有一张空白照片，照片上写有一句话：“别再想我长什么样，下一个你爱上的人，就是我的模样。”　　　</p><p><img src="/微小说欣赏/1.jpg" alt><a id="more"></a></p><h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><p>外婆离开人世的那个黄昏，外公在病房里陪伴着她走完了她生命的最后一段旅程。外婆临去前对外公说‘放学了’。一直假装平静的外公听完这句话后像个孩子似的大哭起来。葬礼结束后我问起外公这三个字的含义，外公告诉我说这是从前他和外婆还在上小学时外婆常说的一句话：放学了，我们一起回家吧。</p><h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><p>她车祸去世后，他思念万分，利用时光机回到过去，阻止惨剧发生。机器出了差错，比预定时间早了几分钟。他拿出钥匙开门，听见卧室传出她的娇喘和男人的声音。她手机响了，他记得这是他打来的。“我得走了，我男人催我呢。”。他听着，惹羞成怒，出门偷了一辆车，看着急匆匆的她，一脚踩下油门。</p><h4 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h4><p>妈妈你看！”小女孩开心地递过来一张写满字的纸。“我听见一个哥哥问姐姐怎么才会爱他，姐姐说只要每天在纸上写1000遍她的名字…”“傻孩子！”女人抱住小女孩：那宝贝是怎么知道爸爸名字的？“这里！”小女孩打开抽屉：上次爸爸把名字签在上面了！女人顺眼望去，里面躺着一张离婚协议书　</p><h4 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h4><p>他看着桌子上忙碌的蚂蚁，伸出手指，一下捏死一只。蚂蚁们大惊，四下乱窜。稍停，又排成一字继续工作。他又伸出手，再捏死一只。蚂蚁大乱，稍顷还是排一字。等到第10次时，蚂蚁们已经熟视无睹。当他向第11只下手时，轰隆一声，巨大的天花板砸了下来。他最后一眼，只看到推倒他房子的那只怪手。　</p><h4 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h4><p>他和她青梅竹马，相约为百姓杀贪官，仗剑天涯。一次刺杀失败被俘，他竟被招安，无数同仁被杀。她含泪发誓要刃叛徒，遂色诱贪官纳她为妾。十年后，他成平反大将。酒宴上，她起身献舞，刺中他手臂。他深情说，你之后，我再无爱过。她心软刃落，他抽刀刺死她，心想，真好骗。</p><h4 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h4><p>他大她快二十岁，他对她很好，百般呵护，他们认识不到一年，他就执意要娶她。朋友都很羡慕她，她却犹豫不决，因为小时候一场手术意外造成她不孕，他是独子，庞大的家族事业等他继承，她不想耽误他。终於她鼓起勇气向他坦诚不孕的事实，他说我知道，当年那刀是我开的，这些年来我一直在找你！</p><h4 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h4><p>5岁“妈妈，烧红烧肉吧”“行，烧”15岁“妈妈，别烧红烧肉了，换换味道” “行，买别的菜” 35岁“儿子，啥时候回家吃一顿啊？妈给做红烧肉” “不行，最近忙” 50岁“妈妈今天路过你家，给你带红烧肉” “不行，今不在家” 70岁“妈，我想吃红烧肉” 那边，已经没有了妈妈的声音</p><h4 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h4><p>就要做心脏移植手术了，他深情地望着躺在床上的妻子，拿签字表的手有点抖。“快签吧，你个窝囊废、穷鬼！”妻骂。手术很成功，她没有一点排异反应。“我那没心肝的丈夫哪？”她问护士。护士递过一张纸，上面画一颗鲜红的心和一行小字：“这是我最后能给你的了，我爱你。”</p><h4 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h4><p>他与爸爸相依至大。他常问：为什么不给他找个后妈？爸爸总是笑说：此生只爱妈妈一个！后来他长大成家，爸爸说要结婚，他愤怒地打了那女人一耳光，骂爸爸是个骗子。从此，爸爸再未提及此事。多年后爸爸去世，他整理遗物时发现了一张自己婴儿时的照片，背面是沧桑的字迹：战友之子，当如吾儿！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;微小说欣赏&quot;&gt;&lt;a href=&quot;#微小说欣赏&quot; class=&quot;headerlink&quot; title=&quot;微小说欣赏&quot;&gt;&lt;/a&gt;微小说欣赏&lt;/h1&gt;&lt;h4 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1.&quot;&gt;&lt;/a&gt;1.&lt;/h4&gt;&lt;p&gt;我因车祸而失明，所以我从不知女友长什么样。那年，她得了胃癌，临终前她将眼角膜移植给了我。我恢复光明后的第一件事就是找她的照片，然而我只找到她留给我的一封信，信里有一张空白照片，照片上写有一句话：“别再想我长什么样，下一个你爱上的人，就是我的模样。”　　　&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/微小说欣赏/1.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="https://angelni.github.io/categories/life/"/>
    
    
      <category term="life" scheme="https://angelni.github.io/tags/life/"/>
    
      <category term="文学" scheme="https://angelni.github.io/tags/%E6%96%87%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>二分法查找</title>
    <link href="https://angelni.github.io/%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE-1.html"/>
    <id>https://angelni.github.io/二分法查找-1.html</id>
    <published>2019-04-07T10:31:39.000Z</published>
    <updated>2019-04-07T10:40:38.280Z</updated>
    
    <content type="html"><![CDATA[<h3 id="二分法查找"><a href="#二分法查找" class="headerlink" title="二分法查找"></a>二分法查找</h3><p>二分法查找，二分搜所，也称折半搜索，每次查找区间减半，适用于数据量较大，对一个有序的数组中查找某一元素。<a id="more"></a></p><h5 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h5><p>给一有序的数组a[9]={1,2,3,4,5,6,7,8,9,}，想要确定  3  的位置。</p><h5 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(a[0]+a[8])/2=5   大于  3则只需要查找a[0]~a[4]就可以</span><br><span class="line">(a[0]+a[4])/2=3   此时刚好等于3，则此时3的位置就是（0+4）/2=2</span><br><span class="line">则可知 a[2]=3    至此查找结束</span><br></pre></td></tr></table></figure><p>下面通过一个例子来具体体验下二分法的妙处</p><h2 id="Trailing-Zeroes"><a href="#Trailing-Zeroes" class="headerlink" title="Trailing Zeroes"></a>Trailing Zeroes</h2><p>n的阶乘尾部有q个连续的0，现在给你q，请你算出满足条件的n，如果有多个n满足条件，输出最小的那个即可。</p><h5 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入一个T(T &lt;= 10000),表示样例数量。</span><br><span class="line"></span><br><span class="line">每个样例输入一个q。(1 &lt;= q &lt;= 100,000,000)</span><br></pre></td></tr></table></figure><h5 id="output"><a href="#output" class="headerlink" title="output"></a><strong>output</strong></h5><p>对于每个样例，输出满足条件的最小的n，如果没有满足条件的则输出”impossible”。.</p><h5 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">5</span><br></pre></td></tr></table></figure><h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Case 1: 5</span><br><span class="line"></span><br><span class="line">Case 2: 10</span><br><span class="line"></span><br><span class="line">Case 3: impossible</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这是一个判断阶乘后面有多少个零，输出满足条件下的最小解。</p><p>首先判断0的个数，我们可以通过判断5的个数来判断0`的个数（10可以分成2*5）</p><p><code>例如：5！=1*2*3*4*5=120</code></p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">long long fn(long long n)   //求n阶乘的末尾0个数 </span><br><span class="line">&#123;</span><br><span class="line">long long a = 0;</span><br><span class="line">while(n)</span><br><span class="line">&#123;</span><br><span class="line">a += n/5;</span><br><span class="line">n = n/5;</span><br><span class="line">&#125;</span><br><span class="line">return a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：判断25！末尾有几个0</p><p>a=25/5  –&gt;   a=5</p><p>a+=5/5   –&gt;   a=6</p><p>由此可以判断25的阶乘末尾有6个零（拿计算器验证）</p><h3 id="整个题解"><a href="#整个题解" class="headerlink" title="整个题解"></a>整个题解</h3><p>（这是大佬写的，我偷偷拿来哈~）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">##### #include&lt;iostream&gt;  //cin，cout数据流输入输出的头文件</span><br><span class="line"></span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;  //声明定义long long 的别名 ll</span><br><span class="line">const ll maxn = 1e17;  //题目中0的个数  1~1e9</span><br><span class="line"></span><br><span class="line">ll fn(ll n)//求n阶乘的末尾0个数 </span><br><span class="line">&#123;</span><br><span class="line">ll a = 0;</span><br><span class="line">while(n)</span><br><span class="line">&#123;</span><br><span class="line">a += n/5;</span><br><span class="line">n = n/5;</span><br><span class="line">&#125;</span><br><span class="line">return a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n, q;</span><br><span class="line">ll ans;//定义所要求的答案</span><br><span class="line">int Case = 0;</span><br><span class="line">cin&gt;&gt;n; //输入测试组数</span><br><span class="line">while(n--)</span><br><span class="line">&#123;</span><br><span class="line">Case++;//判断测试第几个</span><br><span class="line">cin&gt;&gt;q;//输入0的个数</span><br><span class="line">int l, r;//定义左值，和右值</span><br><span class="line">l =1;</span><br><span class="line">r = maxn;</span><br><span class="line">ans = 0;</span><br><span class="line">while(r&gt;=l)</span><br><span class="line">&#123;</span><br><span class="line">ll mid = (l+r)&gt;&gt;1; //直接平均可能溢出，所以用这个  注： &gt;&gt; 值的二进制形式右移一位，相当于十进制除2</span><br><span class="line">if(fn(mid)==q)</span><br><span class="line">&#123;</span><br><span class="line">ans = mid;//如果中间的那个数零的个数恰好等于q，则为答案</span><br><span class="line">r = mid-1;</span><br><span class="line">&#125;</span><br><span class="line">else if(fn(mid)&lt;q) l = mid+1;//如果中间的值0的个数小于q，则左值++</span><br><span class="line">else r = mid-1;//  否则 右值——</span><br><span class="line">&#125;</span><br><span class="line">if(ans) printf(&quot;Case %d: %lld&quot;, Case, ans);//如果结果不为零，按输出格式打印</span><br><span class="line">else printf(&quot;Case %d: impossible&quot;, Case);//否则，则输出impossile</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="放松一下"><a href="#放松一下" class="headerlink" title="放松一下~~~"></a>放松一下~~~</h2><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1554642835723&amp;di=d5fbf4f7b4e2ba96e6b584f78f5f09ee&amp;imgtype=0&amp;src=http%3A%2F%2Fimg3.duitang.com%2Fuploads%2Fblog%2F201501%2F22%2F20150122135125_wcEcV.jpeg" alt="tupan"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;二分法查找&quot;&gt;&lt;a href=&quot;#二分法查找&quot; class=&quot;headerlink&quot; title=&quot;二分法查找&quot;&gt;&lt;/a&gt;二分法查找&lt;/h3&gt;&lt;p&gt;二分法查找，二分搜所，也称折半搜索，每次查找区间减半，适用于数据量较大，对一个有序的数组中查找某一元素。&lt;/p&gt;
    
    </summary>
    
      <category term="算法,C/C++" scheme="https://angelni.github.io/categories/%E7%AE%97%E6%B3%95-C-C/"/>
    
    
      <category term="算法" scheme="https://angelni.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C/C++" scheme="https://angelni.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="https://angelni.github.io/Markdown%E8%AF%AD%E6%B3%95.html"/>
    <id>https://angelni.github.io/Markdown语法.html</id>
    <published>2019-04-06T00:11:48.000Z</published>
    <updated>2019-04-06T03:40:45.417Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Markdown-语法"><a href="#Markdown-语法" class="headerlink" title="Markdown 语法"></a>Markdown 语法</h2><p>最近经过几天的奋斗，自己的博客基本框架终于搭建成功，接下来就是开始写文章了，不过上来就碰上个头疼的问题，就是怎么写的问题，我就想度娘请教（度娘，真帅），说是用Markdown语法写，最近在Notebook上写Python的学习笔记，老师说过要自学Markdown语法，说是非常简单（没错，就是很简单），下面就是Markdown的语法介绍啦，要好好学哟。</p><a id="more"></a><p>在编写 Markdown 时，强烈的推荐给大家一款简洁易用的 Markdown 编辑器 —— Typora</p><p>按照官方的说法就是 简单而强大，它不仅支持原生的语法，也支持对应的快捷键，更重要的是它还可以 实时预览</p><p>这里附上 Typora 的下载地址：<a href="https://www.typora.io/" target="_blank" rel="noopener">点击这里</a> ,  有兴趣的朋友可以下载来试试</p><p>好，下面开始进入正题，介绍一些常用的 Markdown 语法</p><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="(1) 标题"></a>(1) 标题</h3><h4 id="Markdown语法："><a href="#Markdown语法：" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#一级标题`</span><br><span class="line"></span><br><span class="line">`##二级标题`</span><br><span class="line"></span><br><span class="line">`###三级标题`</span><br><span class="line"></span><br><span class="line">`####四级标题`</span><br><span class="line"></span><br><span class="line">`#####五级标题`</span><br><span class="line"></span><br><span class="line">`######六级标题</span><br></pre></td></tr></table></figure><h4 id="Typora快捷键："><a href="#Typora快捷键：" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + 1：一级标题</span><br><span class="line"></span><br><span class="line">Ctrl + 2：二级标题</span><br><span class="line"></span><br><span class="line">Ctrl + 3：三级标题</span><br><span class="line"></span><br><span class="line">Ctrl + 4：四级标题</span><br><span class="line"></span><br><span class="line">Ctrl + 5：五级标题</span><br><span class="line"></span><br><span class="line">Ctrl + 6：六级标题</span><br></pre></td></tr></table></figure><h3 id="2-粗体、斜体、删除线"><a href="#2-粗体、斜体、删除线" class="headerlink" title="(2)粗体、斜体、删除线"></a>(2)粗体、斜体、删除线</h3><h4 id="Markdown语法：-1"><a href="#Markdown语法：-1" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*斜体*`</span><br><span class="line"></span><br><span class="line">`**粗体**`</span><br><span class="line"></span><br><span class="line">`***加粗斜线***`</span><br><span class="line"></span><br><span class="line">`~~删除线~~</span><br></pre></td></tr></table></figure><h4 id="Typora快捷键：-1"><a href="#Typora快捷键：-1" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+l ：斜体</span><br><span class="line"></span><br><span class="line">Ctrl+B：粗体</span><br><span class="line"></span><br><span class="line">Ctrl+U：下划线</span><br><span class="line"></span><br><span class="line">Alt + Shift + 5 ：删除线</span><br></pre></td></tr></table></figure><h3 id="3-引用块"><a href="#3-引用块" class="headerlink" title="(3) 引用块"></a>(3) 引用块</h3><h4 id="Markdown语法：-2"><a href="#Markdown语法：-2" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><p><code>&gt; 文字引用</code></p><h4 id="Typora快捷键：-2"><a href="#Typora快捷键：-2" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Shift + Q</span><br></pre></td></tr></table></figure><h3 id="4-代码块"><a href="#4-代码块" class="headerlink" title="(4)代码块"></a>(4)代码块</h3><h4 id="Markdown语法：-3"><a href="#Markdown语法：-3" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><p><code>&#39; 行内代码&#39;</code></p><p><code>&#39;&#39;&#39; 多行代码&#39;&#39;&#39;</code></p><h4 id="Typora快捷键：-3"><a href="#Typora快捷键：-3" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">行内代码： Ctrl + Shift + `</span><br><span class="line"></span><br><span class="line">多行代码：Ctrl + Shift +K</span><br></pre></td></tr></table></figure><h3 id="5-公式块"><a href="#5-公式块" class="headerlink" title="(5)公式块"></a>(5)公式块</h3><h4 id="Markdown语法：-4"><a href="#Markdown语法：-4" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$数学公式$$</span><br></pre></td></tr></table></figure><h4 id="Typora快捷键：-4"><a href="#Typora快捷键：-4" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Shift + M</span><br></pre></td></tr></table></figure><h3 id="6-分割线"><a href="#6-分割线" class="headerlink" title="(6)分割线"></a>(6)分割线</h3><h4 id="Markdown-语法："><a href="#Markdown-语法：" class="headerlink" title="Markdown 语法："></a>Markdown 语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方法1：---`</span><br><span class="line"></span><br><span class="line">`方法2：+++`</span><br><span class="line"></span><br><span class="line">`方法3：***</span><br></pre></td></tr></table></figure><h3 id="7-列表"><a href="#7-列表" class="headerlink" title="(7)列表"></a>(7)列表</h3><h4 id="Markdown语法：-5"><a href="#Markdown语法：-5" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><p><code>1.有序列表项</code></p><p><code>2. * 无序列表项</code></p><p><code>3. + 无序列表项</code></p><p><code>4. - 无序列表项</code></p><h4 id="Typora快捷键：-5"><a href="#Typora快捷键：-5" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><p>有序列表项：Ctrl+Shift+[</p><p>有序列表项：Ctrl+Shift+]</p><h3 id="8-表格"><a href="#8-表格" class="headerlink" title="(8) 表格"></a>(8) 表格</h3><h4 id="Markdown语法：-6"><a href="#Markdown语法：-6" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><p><code>1. 表头1|表头2</code></p><p><code>-|-|-</code></p><p><code>内容11|内容12</code></p><p><code>内容21|内容22</code></p><h4 id="Typora-快捷键："><a href="#Typora-快捷键：" class="headerlink" title="Typora 快捷键："></a><strong>Typora 快捷键：</strong></h4><p>Ctrl+T</p><h3 id="9-超链接"><a href="#9-超链接" class="headerlink" title="(9)超链接"></a>(9)超链接</h3><h4 id="Markdown语法：-7"><a href="#Markdown语法：-7" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><p><code>方法一：[链接文字](链接地址 &quot;链接描述&quot;)</code></p><p><code>例如：[示例链接](https://www.example.com/ &quot;示例链接&quot;)</code></p><p><code>方法二：&lt;链接地址&gt;</code></p><p><code>例如：&lt;https://www.example.com/&gt;</code></p><h4 id="Typora快捷键：-6"><a href="#Typora快捷键：-6" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><p>Ctrl+K</p><h3 id="10-图片"><a href="#10-图片" class="headerlink" title="(10)图片"></a>(10)图片</h3><h4 id="Markdown语法：-8"><a href="#Markdown语法：-8" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><p><code>![图片文字](图片地址 &quot;图片描述&quot;)</code></p><p><code>例如：![示例图片](https://www.example.com/example.PNG &quot;示例图片&quot;)</code></p><h4 id="Typora快捷键：-7"><a href="#Typora快捷键：-7" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><p>Ctrl+Shift+I</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Markdown-语法&quot;&gt;&lt;a href=&quot;#Markdown-语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown 语法&quot;&gt;&lt;/a&gt;Markdown 语法&lt;/h2&gt;&lt;p&gt;最近经过几天的奋斗，自己的博客基本框架终于搭建成功，接下来就是开始写文章了，不过上来就碰上个头疼的问题，就是怎么写的问题，我就想度娘请教（度娘，真帅），说是用Markdown语法写，最近在Notebook上写Python的学习笔记，老师说过要自学Markdown语法，说是非常简单（没错，就是很简单），下面就是Markdown的语法介绍啦，要好好学哟。&lt;/p&gt;
    
    </summary>
    
      <category term="Markdown语法" scheme="https://angelni.github.io/categories/Markdown%E8%AF%AD%E6%B3%95/"/>
    
    
      <category term="Markdown" scheme="https://angelni.github.io/tags/Markdown/"/>
    
      <category term="python学习" scheme="https://angelni.github.io/tags/python%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github</title>
    <link href="https://angelni.github.io/hexo-github.html"/>
    <id>https://angelni.github.io/hexo-github.html</id>
    <published>2019-04-05T13:40:12.000Z</published>
    <updated>2019-04-06T03:21:28.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="博客搭建-自己总结"><a href="#博客搭建-自己总结" class="headerlink" title="博客搭建(自己总结)"></a>博客搭建(自己总结)</h2><p>之前自己搭建博客，可以说废了很大的劲，这里总结了一下各位大佬们搭建博客的方法，供大家借鉴。<br><a id="more"></a></p><h3 id="1-安装所需软件"><a href="#1-安装所需软件" class="headerlink" title="1.安装所需软件"></a>1.安装所需软件</h3><h4 id="1-git安装"><a href="#1-git安装" class="headerlink" title="1.git安装"></a>1.git安装</h4><p>Windows系统下安装git</p><p>可以直接到官网下载安装<a href="https://git-scm.com/" target="_blank" rel="noopener">点击这里</a></p><p>由于访问的是外网，下载速度可能会慢（也可能非常慢）</p><p>下面提供百度云的下载地址</p><p>64-bit Git for Windows Setup : <a href="https://npm.taobao.org/mirrors/git-for-windows/v2.21.0.windows.1/Git-2.21.0-64-bit.exe" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/git-for-windows/v2.21.0.windows.1/Git-2.21.0-64-bit.exe</a></p><h4 id="2-Node-js安装"><a href="#2-Node-js安装" class="headerlink" title="2.Node.js安装"></a>2.Node.js安装</h4><p>可以直接到官网下载安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">点击这里</a></p><p>百度网盘资源： <a href="https://pan.baidu.com/s/1hKVcYfPorRX89hl7D4R1eA" target="_blank" rel="noopener">https://pan.baidu.com/s/1hKVcYfPorRX89hl7D4R1eA</a></p><p>提取码：wsti</p><p>下载完成后，安装时一定要点击 Add to PATH</p><p>安装完成后，打开cmd，<code>输入  node -v</code> 测试安装是否成功</p><p>下面来解决npm卡顿问题</p><p>1.打开cmd，换成阿里源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>2.验证命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.npm config get registry    //返回https://registry.npm.taobao.org，说明镜像配置成功</span><br></pre></td></tr></table></figure><p>3.安装cnpm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h4 id="3-hexo安装"><a href="#3-hexo安装" class="headerlink" title="3.hexo安装"></a>3.hexo安装</h4><p>打开git目录下的git-bash.exe，输入下面代码</p><p> npm install -g hexo-cli</p><p>安装hexo完成后执行下列命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;文件夹名&gt; </span><br><span class="line">cd &lt;文件夹名&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>hexo 理论上安装在git文件夹下</p><h4 id="4-在github上注册账号并同时建立仓库"><a href="#4-在github上注册账号并同时建立仓库" class="headerlink" title="4.在github上注册账号并同时建立仓库"></a>4.在github上注册账号并同时建立仓库</h4><p>gitHub是一个面向<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90/20720669" target="_blank" rel="noopener">开源</a>及私有<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053" target="_blank" rel="noopener">软件</a>项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。（来源百度百科）</p><p>github官网<a href="https://github.com/" target="_blank" rel="noopener">点击这里</a></p><p>这个是github基础设置和使用详解<a href="https://www.jianshu.com/p/f51062941573" target="_blank" rel="noopener">点击这里</a></p><h4 id="5-ssh授权获取私钥"><a href="#5-ssh授权获取私钥" class="headerlink" title="5.ssh授权获取私钥"></a>5.ssh授权获取私钥</h4><p>先配置SSH,在git-bash下输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;github注册名&quot;</span><br><span class="line">git config --global user.email &quot;github注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>打开git bash，输入ssh-kengen -t rsa，停顿时，敲击回车</p><p>最后会在C盘目录下生成id_ras和id_rsa.pub两个文件夹，用记事本打开id_rsa.pub，复制打开的文件内容到 github-&gt;setting-&gt;SSH and GPG key 下</p><p>添加后，在git-bash进行测试，输入 ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>    如果返回Hi username ！You’ve successfully ……，说明配置成功</p><h4 id="6-配置-config-yml"><a href="#6-配置-config-yml" class="headerlink" title="6.配置_config.yml"></a>6.配置_config.yml</h4><p>打开你的hexo目录下的_config.yml文档（我用的是notepad++打开的）</p><p>修改最下面的deploy下的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type: git</span><br><span class="line"></span><br><span class="line">repository :  //这里是你的仓库下，点击Clone ordownload（绿色的）点击Use SSH复制框框内的内容到这里。</span><br><span class="line"></span><br><span class="line">bransh：//这里是你的bransh名称，默认为master</span><br></pre></td></tr></table></figure><p>下面来修改 url和 root</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url ：// 是你的github 分配的地址</span><br><span class="line"></span><br><span class="line">root：// 是你的仓库的名字</span><br></pre></td></tr></table></figure><p>一定要注意每一项冒号后有一个英文空格</p><h4 id="7-本地测试"><a href="#7-本地测试" class="headerlink" title="7.本地测试"></a>7.本地测试</h4><p>打开git bash进入博客的根目录（cd + 文件夹名）</p><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>hexo s是开启本地预览服务，打开浏览器访问<a href="http://localhost:4000/" target="_blank" rel="noopener"> http://localhost:4000</a> 即可看到内容。</p><p>显示的主题是  hexo 默认的</p><p>hexo 操作指令<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">点击这里</a></p><h4 id="8-上传到github仓库"><a href="#8-上传到github仓库" class="headerlink" title="8.上传到github仓库"></a>8.上传到github仓库</h4><p>首先先安装hexo拓展库，打开git bash输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>然后输入 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean//清除缓存</span><br><span class="line">hexo g//生成静态文件</span><br><span class="line">hexo d/上传</span><br><span class="line">打开github分配的网站，就可以看到你的blog了</span><br></pre></td></tr></table></figure><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>自己搭建博客可能不是一帆风顺的，可能遇到各种不同的错误，一定要耐得住性子，一步一步来搭建。</p><p>记得，一定要善用搜索，遇到不懂得问题去百度上搜索。</p><p>最后，度娘，可真帅哪！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;博客搭建-自己总结&quot;&gt;&lt;a href=&quot;#博客搭建-自己总结&quot; class=&quot;headerlink&quot; title=&quot;博客搭建(自己总结)&quot;&gt;&lt;/a&gt;博客搭建(自己总结)&lt;/h2&gt;&lt;p&gt;之前自己搭建博客，可以说废了很大的劲，这里总结了一下各位大佬们搭建博客的方法，供大家借鉴。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo+github" scheme="https://angelni.github.io/categories/hexo-github/"/>
    
    
      <category term="hexo+github" scheme="https://angelni.github.io/tags/hexo-github/"/>
    
  </entry>
  
  <entry>
    <title>Hello world</title>
    <link href="https://angelni.github.io/Helloworld.html"/>
    <id>https://angelni.github.io/Helloworld.html</id>
    <published>2019-04-05T09:55:48.000Z</published>
    <updated>2019-04-06T03:20:49.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h1><h5 id="记一次过程经历"><a href="#记一次过程经历" class="headerlink" title="记一次过程经历"></a>记一次过程经历</h5><p>​    最近，自己在搭一个博客，用 hexo+github，一开始按照网上的教程下载相应的软件，cmd安装，git bash 安装hexo，最开始可是在自己的本地可以预览，效果不错，直接就上传到github上的我的repo，结果cmd出错，由于对hexo 文件的位置不清，<a id="more"></a>和出现的错误，我直接就删除了hexo，但是不是直接的卸载，有些文件还在（找不到啊 呜呜~），我用重新npm安装，发现还是不行，当时头大到想要格式化电脑了（还好没有，要不然就要重新慢慢下载了），然后我去找baidu，简书，发现自己的许多错误操作。好吧，我又从新开始。还是有error，我就按个所错误，发现自己有许多的本地配置没有设置，我就一条一条的修改（可气人了，一步踩一个坑，一步填一个坑），花了两天才把本地配置好（上课没时间啊）。</p><p>​    又因为，默认的主题很low（只是个人而言），不怎么喜欢，想换个主题，hexo上面有好多的主题，一个一个翻看，也没有喜欢的，现在比较流行的是NEXT主题（没错我找了度娘），就在网上下载NEXT主题包，一开始的主题内容，没设计的，所以我又找了度娘，还在CSDN上搜搜，发现许多大佬掉了许多的坑，也有填坑的方法(坑和经验，傻傻分不清），就开始一步一步自己搭，终于，经过一天多的自己的骚操作，在清明节的下午本地可以看到比较好的主题设置（还有点不满意，后续会修改）。</p><h5 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h5><p>​    （真是不作死不会死，谁TM知道我为什么突然想到建博客呢！）</p><p>​    经过三天多自己的摸索，我这个小小白终于把自己的blog建成了（~~热烈欢迎大家访问）。在建博客的过程中，真是有点头大了，因为自己对命令行操作一点不了解，完全是两眼一模黑，在黑暗中摸索（哈哈，有点夸张），出现错误也不知道哪里的问题，真的很感谢度娘的帮助（说白了，多谢大佬们的坑啊）。</p><p>​    这篇文章的标题是printf(“Hello,world”),学C语言的都知道这是入门的基础程序，我想用这个标题想说，当你去接触一个陌生不懂的东西时，不是一帆风顺的，总会有大波小浪，不过，经过自己的一步一步的摸索总会找到自己的___（你懂的哈），不管如何都不要放弃，既然已经迈开了重要的第一步，就要坚持走到终点。</p><p>​    对了，还有还有，“生命在于运动，电脑在于折腾啊”，不管会不会，先折腾折腾吧（坏了我可不管~~)</p><p>​    .</p><p>​    .</p><p>​    .</p><p>​    .</p><p>​    .</p><p>​    .</p><p>​    .</p><p>​    .</p><p>​    度娘，真帅！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hello-world&quot;&gt;&lt;a href=&quot;#Hello-world&quot; class=&quot;headerlink&quot; title=&quot;Hello world&quot;&gt;&lt;/a&gt;Hello world&lt;/h1&gt;&lt;h5 id=&quot;记一次过程经历&quot;&gt;&lt;a href=&quot;#记一次过程经历&quot; class=&quot;headerlink&quot; title=&quot;记一次过程经历&quot;&gt;&lt;/a&gt;记一次过程经历&lt;/h5&gt;&lt;p&gt;​    最近，自己在搭一个博客，用 hexo+github，一开始按照网上的教程下载相应的软件，cmd安装，git bash 安装hexo，最开始可是在自己的本地可以预览，效果不错，直接就上传到github上的我的repo，结果cmd出错，由于对hexo 文件的位置不清，&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="https://angelni.github.io/categories/life/"/>
    
    
      <category term="life" scheme="https://angelni.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://angelni.github.io/hello-world.html"/>
    <id>https://angelni.github.io/hello-world.html</id>
    <published>2019-04-04T08:40:36.104Z</published>
    <updated>2019-04-05T11:13:09.032Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="life" scheme="https://angelni.github.io/tags/life/"/>
    
  </entry>
  
</feed>
